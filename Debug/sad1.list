
sad1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045f4  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000b3c0  080047bc  080047bc  000147bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fb7c  0800fb7c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800fb7c  0800fb7c  0001fb7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fb84  0800fb84  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fb84  0800fb84  0001fb84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fb88  0800fb88  0001fb88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800fb8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0003fd28  2000000c  0800fb98  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  2003fd34  0800fb98  0002fd34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d564  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020ac  00000000  00000000  0002d5e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cd0  00000000  00000000  0002f690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009da  00000000  00000000  00030360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025d1e  00000000  00000000  00030d3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fb6e  00000000  00000000  00056a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec4bd  00000000  00000000  000665c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003594  00000000  00000000  00152a84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00156018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080047a4 	.word	0x080047a4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080047a4 	.word	0x080047a4

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b970 	b.w	8000500 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	460d      	mov	r5, r1
 8000240:	4604      	mov	r4, r0
 8000242:	460f      	mov	r7, r1
 8000244:	2b00      	cmp	r3, #0
 8000246:	d14a      	bne.n	80002de <__udivmoddi4+0xa6>
 8000248:	428a      	cmp	r2, r1
 800024a:	4694      	mov	ip, r2
 800024c:	d965      	bls.n	800031a <__udivmoddi4+0xe2>
 800024e:	fab2 f382 	clz	r3, r2
 8000252:	b143      	cbz	r3, 8000266 <__udivmoddi4+0x2e>
 8000254:	fa02 fc03 	lsl.w	ip, r2, r3
 8000258:	f1c3 0220 	rsb	r2, r3, #32
 800025c:	409f      	lsls	r7, r3
 800025e:	fa20 f202 	lsr.w	r2, r0, r2
 8000262:	4317      	orrs	r7, r2
 8000264:	409c      	lsls	r4, r3
 8000266:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800026a:	fa1f f58c 	uxth.w	r5, ip
 800026e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000272:	0c22      	lsrs	r2, r4, #16
 8000274:	fb0e 7711 	mls	r7, lr, r1, r7
 8000278:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800027c:	fb01 f005 	mul.w	r0, r1, r5
 8000280:	4290      	cmp	r0, r2
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x62>
 8000284:	eb1c 0202 	adds.w	r2, ip, r2
 8000288:	f101 37ff 	add.w	r7, r1, #4294967295
 800028c:	f080 811c 	bcs.w	80004c8 <__udivmoddi4+0x290>
 8000290:	4290      	cmp	r0, r2
 8000292:	f240 8119 	bls.w	80004c8 <__udivmoddi4+0x290>
 8000296:	3902      	subs	r1, #2
 8000298:	4462      	add	r2, ip
 800029a:	1a12      	subs	r2, r2, r0
 800029c:	b2a4      	uxth	r4, r4
 800029e:	fbb2 f0fe 	udiv	r0, r2, lr
 80002a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002aa:	fb00 f505 	mul.w	r5, r0, r5
 80002ae:	42a5      	cmp	r5, r4
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x90>
 80002b2:	eb1c 0404 	adds.w	r4, ip, r4
 80002b6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ba:	f080 8107 	bcs.w	80004cc <__udivmoddi4+0x294>
 80002be:	42a5      	cmp	r5, r4
 80002c0:	f240 8104 	bls.w	80004cc <__udivmoddi4+0x294>
 80002c4:	4464      	add	r4, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002cc:	1b64      	subs	r4, r4, r5
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11e      	cbz	r6, 80002da <__udivmoddi4+0xa2>
 80002d2:	40dc      	lsrs	r4, r3
 80002d4:	2300      	movs	r3, #0
 80002d6:	e9c6 4300 	strd	r4, r3, [r6]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0xbc>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80ed 	beq.w	80004c2 <__udivmoddi4+0x28a>
 80002e8:	2100      	movs	r1, #0
 80002ea:	e9c6 0500 	strd	r0, r5, [r6]
 80002ee:	4608      	mov	r0, r1
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	fab3 f183 	clz	r1, r3
 80002f8:	2900      	cmp	r1, #0
 80002fa:	d149      	bne.n	8000390 <__udivmoddi4+0x158>
 80002fc:	42ab      	cmp	r3, r5
 80002fe:	d302      	bcc.n	8000306 <__udivmoddi4+0xce>
 8000300:	4282      	cmp	r2, r0
 8000302:	f200 80f8 	bhi.w	80004f6 <__udivmoddi4+0x2be>
 8000306:	1a84      	subs	r4, r0, r2
 8000308:	eb65 0203 	sbc.w	r2, r5, r3
 800030c:	2001      	movs	r0, #1
 800030e:	4617      	mov	r7, r2
 8000310:	2e00      	cmp	r6, #0
 8000312:	d0e2      	beq.n	80002da <__udivmoddi4+0xa2>
 8000314:	e9c6 4700 	strd	r4, r7, [r6]
 8000318:	e7df      	b.n	80002da <__udivmoddi4+0xa2>
 800031a:	b902      	cbnz	r2, 800031e <__udivmoddi4+0xe6>
 800031c:	deff      	udf	#255	; 0xff
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	2b00      	cmp	r3, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x210>
 8000328:	1a8a      	subs	r2, r1, r2
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2101      	movs	r1, #1
 8000334:	fbb2 f5f7 	udiv	r5, r2, r7
 8000338:	fb07 2015 	mls	r0, r7, r5, r2
 800033c:	0c22      	lsrs	r2, r4, #16
 800033e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000342:	fb0e f005 	mul.w	r0, lr, r5
 8000346:	4290      	cmp	r0, r2
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x124>
 800034a:	eb1c 0202 	adds.w	r2, ip, r2
 800034e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4290      	cmp	r0, r2
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2b8>
 800035a:	4645      	mov	r5, r8
 800035c:	1a12      	subs	r2, r2, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb2 f0f7 	udiv	r0, r2, r7
 8000364:	fb07 2210 	mls	r2, r7, r0, r2
 8000368:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x14e>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 32ff 	add.w	r2, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x14c>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2c2>
 8000384:	4610      	mov	r0, r2
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038e:	e79f      	b.n	80002d0 <__udivmoddi4+0x98>
 8000390:	f1c1 0720 	rsb	r7, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa05 f401 	lsl.w	r4, r5, r1
 80003a2:	fa20 f307 	lsr.w	r3, r0, r7
 80003a6:	40fd      	lsrs	r5, r7
 80003a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fbb5 f8f9 	udiv	r8, r5, r9
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c0:	fb08 f50e 	mul.w	r5, r8, lr
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	fa00 f001 	lsl.w	r0, r0, r1
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2b4>
 80003dc:	42a5      	cmp	r5, r4
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2b4>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4464      	add	r4, ip
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	b29d      	uxth	r5, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003fc:	45a6      	cmp	lr, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f103 35ff 	add.w	r5, r3, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2ac>
 800040a:	45a6      	cmp	lr, r4
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2ac>
 800040e:	3b02      	subs	r3, #2
 8000410:	4464      	add	r4, ip
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fba3 9502 	umull	r9, r5, r3, r2
 800041a:	eba4 040e 	sub.w	r4, r4, lr
 800041e:	42ac      	cmp	r4, r5
 8000420:	46c8      	mov	r8, r9
 8000422:	46ae      	mov	lr, r5
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x29c>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x298>
 8000428:	b156      	cbz	r6, 8000440 <__udivmoddi4+0x208>
 800042a:	ebb0 0208 	subs.w	r2, r0, r8
 800042e:	eb64 040e 	sbc.w	r4, r4, lr
 8000432:	fa04 f707 	lsl.w	r7, r4, r7
 8000436:	40ca      	lsrs	r2, r1
 8000438:	40cc      	lsrs	r4, r1
 800043a:	4317      	orrs	r7, r2
 800043c:	e9c6 7400 	strd	r7, r4, [r6]
 8000440:	4618      	mov	r0, r3
 8000442:	2100      	movs	r1, #0
 8000444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000448:	f1c3 0120 	rsb	r1, r3, #32
 800044c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000450:	fa20 f201 	lsr.w	r2, r0, r1
 8000454:	fa25 f101 	lsr.w	r1, r5, r1
 8000458:	409d      	lsls	r5, r3
 800045a:	432a      	orrs	r2, r5
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb1 f0f7 	udiv	r0, r1, r7
 8000468:	fb07 1510 	mls	r5, r7, r0, r1
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000472:	fb00 f50e 	mul.w	r5, r0, lr
 8000476:	428d      	cmp	r5, r1
 8000478:	fa04 f403 	lsl.w	r4, r4, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x258>
 800047e:	eb1c 0101 	adds.w	r1, ip, r1
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 8000488:	428d      	cmp	r5, r1
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 800048c:	3802      	subs	r0, #2
 800048e:	4461      	add	r1, ip
 8000490:	1b49      	subs	r1, r1, r5
 8000492:	b292      	uxth	r2, r2
 8000494:	fbb1 f5f7 	udiv	r5, r1, r7
 8000498:	fb07 1115 	mls	r1, r7, r5, r1
 800049c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a0:	fb05 f10e 	mul.w	r1, r5, lr
 80004a4:	4291      	cmp	r1, r2
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x282>
 80004a8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ac:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 80004b2:	4291      	cmp	r1, r2
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 80004b6:	3d02      	subs	r5, #2
 80004b8:	4462      	add	r2, ip
 80004ba:	1a52      	subs	r2, r2, r1
 80004bc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0xfc>
 80004c2:	4631      	mov	r1, r6
 80004c4:	4630      	mov	r0, r6
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xa2>
 80004c8:	4639      	mov	r1, r7
 80004ca:	e6e6      	b.n	800029a <__udivmoddi4+0x62>
 80004cc:	4610      	mov	r0, r2
 80004ce:	e6fb      	b.n	80002c8 <__udivmoddi4+0x90>
 80004d0:	4548      	cmp	r0, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004dc:	3b01      	subs	r3, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004e0:	4645      	mov	r5, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x282>
 80004e4:	462b      	mov	r3, r5
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x258>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004f0:	3d02      	subs	r5, #2
 80004f2:	4462      	add	r2, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x124>
 80004f6:	4608      	mov	r0, r1
 80004f8:	e70a      	b.n	8000310 <__udivmoddi4+0xd8>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x14e>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <FillScreenDayOrNight>:
 */
#include "ltdc.h"
extern volatile uint32_t RGB565_480x272[65280];
extern LTDC_HandleTypeDef hltdc;
void FillScreenDayOrNight(uint32_t color)
{
 8000504:	b480      	push	{r7}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t n = hltdc.LayerCfg[0].ImageHeight * hltdc.LayerCfg[0].ImageWidth;
 800050c:	4b0f      	ldr	r3, [pc, #60]	; (800054c <FillScreenDayOrNight+0x48>)
 800050e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000510:	4a0e      	ldr	r2, [pc, #56]	; (800054c <FillScreenDayOrNight+0x48>)
 8000512:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8000514:	fb02 f303 	mul.w	r3, r2, r3
 8000518:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < n; i++)
 800051a:	2300      	movs	r3, #0
 800051c:	60fb      	str	r3, [r7, #12]
 800051e:	e00a      	b.n	8000536 <FillScreenDayOrNight+0x32>
	{
		*(__IO uint16_t*) (hltdc.LayerCfg[0].FBStartAdress + (i * 2)) = (uint16_t) color;
 8000520:	4b0a      	ldr	r3, [pc, #40]	; (800054c <FillScreenDayOrNight+0x48>)
 8000522:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	005b      	lsls	r3, r3, #1
 8000528:	4413      	add	r3, r2
 800052a:	687a      	ldr	r2, [r7, #4]
 800052c:	b292      	uxth	r2, r2
 800052e:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < n; i++)
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	3301      	adds	r3, #1
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	68fa      	ldr	r2, [r7, #12]
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	429a      	cmp	r2, r3
 800053c:	d3f0      	bcc.n	8000520 <FillScreenDayOrNight+0x1c>
	}
}
 800053e:	bf00      	nop
 8000540:	bf00      	nop
 8000542:	3714      	adds	r7, #20
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr
 800054c:	20000028 	.word	0x20000028

08000550 <DrawLine>:

void DrawLine(uint32_t color) {
 8000550:	b480      	push	{r7}
 8000552:	b085      	sub	sp, #20
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
	uint32_t j;
	uint32_t n = hltdc.LayerCfg[0].ImageWidth;
 8000558:	4b18      	ldr	r3, [pc, #96]	; (80005bc <DrawLine+0x6c>)
 800055a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800055c:	60bb      	str	r3, [r7, #8]
	for (j = 0; j < n; j++)
 800055e:	2300      	movs	r3, #0
 8000560:	60fb      	str	r3, [r7, #12]
 8000562:	e020      	b.n	80005a6 <DrawLine+0x56>
	{
		*(__IO uint16_t*) (hltdc.LayerCfg[0].FBStartAdress + (2 * ((104 + 0) * hltdc.LayerCfg[0].ImageWidth + j))) = (uint16_t) color;
 8000564:	4b15      	ldr	r3, [pc, #84]	; (80005bc <DrawLine+0x6c>)
 8000566:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000568:	4b14      	ldr	r3, [pc, #80]	; (80005bc <DrawLine+0x6c>)
 800056a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800056c:	2168      	movs	r1, #104	; 0x68
 800056e:	fb03 f101 	mul.w	r1, r3, r1
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	440b      	add	r3, r1
 8000576:	005b      	lsls	r3, r3, #1
 8000578:	4413      	add	r3, r2
 800057a:	687a      	ldr	r2, [r7, #4]
 800057c:	b292      	uxth	r2, r2
 800057e:	801a      	strh	r2, [r3, #0]
		*(__IO uint16_t*) (hltdc.LayerCfg[0].FBStartAdress + (2 * ((105 + 0) * hltdc.LayerCfg[0].ImageWidth + j))) = (uint16_t) color;
 8000580:	4b0e      	ldr	r3, [pc, #56]	; (80005bc <DrawLine+0x6c>)
 8000582:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8000584:	4b0d      	ldr	r3, [pc, #52]	; (80005bc <DrawLine+0x6c>)
 8000586:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000588:	4613      	mov	r3, r2
 800058a:	00db      	lsls	r3, r3, #3
 800058c:	1a9b      	subs	r3, r3, r2
 800058e:	011a      	lsls	r2, r3, #4
 8000590:	1ad2      	subs	r2, r2, r3
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	4413      	add	r3, r2
 8000596:	005b      	lsls	r3, r3, #1
 8000598:	440b      	add	r3, r1
 800059a:	687a      	ldr	r2, [r7, #4]
 800059c:	b292      	uxth	r2, r2
 800059e:	801a      	strh	r2, [r3, #0]
	for (j = 0; j < n; j++)
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	3301      	adds	r3, #1
 80005a4:	60fb      	str	r3, [r7, #12]
 80005a6:	68fa      	ldr	r2, [r7, #12]
 80005a8:	68bb      	ldr	r3, [r7, #8]
 80005aa:	429a      	cmp	r2, r3
 80005ac:	d3da      	bcc.n	8000564 <DrawLine+0x14>
	}
}
 80005ae:	bf00      	nop
 80005b0:	bf00      	nop
 80005b2:	3714      	adds	r7, #20
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	20000028 	.word	0x20000028

080005c0 <DrawGameOver>:

void DrawGameOver(uint32_t color) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	f5ad 4d09 	sub.w	sp, sp, #35072	; 0x8900
 80005c6:	b0a4      	sub	sp, #144	; 0x90
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 80005ce:	f6a3 138c 	subw	r3, r3, #2444	; 0x98c
 80005d2:	6018      	str	r0, [r3, #0]
	uint32_t i, j;
	int matrix[40][220] =
 80005d4:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 80005d8:	f6a3 1388 	subw	r3, r3, #2440	; 0x988
 80005dc:	4a35      	ldr	r2, [pc, #212]	; (80006b4 <DrawGameOver+0xf4>)
 80005de:	4618      	mov	r0, r3
 80005e0:	4611      	mov	r1, r2
 80005e2:	f648 1380 	movw	r3, #35200	; 0x8980
 80005e6:	461a      	mov	r2, r3
 80005e8:	f004 f8ce 	bl	8004788 <memcpy>
	  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	  0, 0, 0, 0}};
	for (i = 200; i < 240; i++)
 80005ec:	23c8      	movs	r3, #200	; 0xc8
 80005ee:	f648 128c 	movw	r2, #35212	; 0x898c
 80005f2:	443a      	add	r2, r7
 80005f4:	6013      	str	r3, [r2, #0]
 80005f6:	e050      	b.n	800069a <DrawGameOver+0xda>
	{
		for (j = 130; j < 350; j++)
 80005f8:	2382      	movs	r3, #130	; 0x82
 80005fa:	f648 1288 	movw	r2, #35208	; 0x8988
 80005fe:	443a      	add	r2, r7
 8000600:	6013      	str	r3, [r2, #0]
 8000602:	e03a      	b.n	800067a <DrawGameOver+0xba>
		{
			if (matrix[39 - (i - 200)][219 - (j - 130)] == 1) *(__IO uint16_t*) (hltdc.LayerCfg[0].FBStartAdress + (2 * (i * hltdc.LayerCfg[0].ImageWidth + j))) = (uint16_t) color;
 8000604:	f648 138c 	movw	r3, #35212	; 0x898c
 8000608:	443b      	add	r3, r7
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f1c3 01ef 	rsb	r1, r3, #239	; 0xef
 8000610:	f648 1388 	movw	r3, #35208	; 0x8988
 8000614:	443b      	add	r3, r7
 8000616:	681a      	ldr	r2, [r3, #0]
 8000618:	f240 135d 	movw	r3, #349	; 0x15d
 800061c:	1a9b      	subs	r3, r3, r2
 800061e:	f507 6219 	add.w	r2, r7, #2448	; 0x990
 8000622:	f6a2 1288 	subw	r2, r2, #2440	; 0x988
 8000626:	20dc      	movs	r0, #220	; 0xdc
 8000628:	fb00 f101 	mul.w	r1, r0, r1
 800062c:	440b      	add	r3, r1
 800062e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000632:	2b01      	cmp	r3, #1
 8000634:	d118      	bne.n	8000668 <DrawGameOver+0xa8>
 8000636:	4b20      	ldr	r3, [pc, #128]	; (80006b8 <DrawGameOver+0xf8>)
 8000638:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800063a:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <DrawGameOver+0xf8>)
 800063c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800063e:	f648 118c 	movw	r1, #35212	; 0x898c
 8000642:	4439      	add	r1, r7
 8000644:	6809      	ldr	r1, [r1, #0]
 8000646:	fb03 f101 	mul.w	r1, r3, r1
 800064a:	f648 1388 	movw	r3, #35208	; 0x8988
 800064e:	443b      	add	r3, r7
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	440b      	add	r3, r1
 8000654:	005b      	lsls	r3, r3, #1
 8000656:	4413      	add	r3, r2
 8000658:	461a      	mov	r2, r3
 800065a:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 800065e:	f6a3 138c 	subw	r3, r3, #2444	; 0x98c
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	b29b      	uxth	r3, r3
 8000666:	8013      	strh	r3, [r2, #0]
		for (j = 130; j < 350; j++)
 8000668:	f648 1388 	movw	r3, #35208	; 0x8988
 800066c:	443b      	add	r3, r7
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	3301      	adds	r3, #1
 8000672:	f648 1288 	movw	r2, #35208	; 0x8988
 8000676:	443a      	add	r2, r7
 8000678:	6013      	str	r3, [r2, #0]
 800067a:	f648 1388 	movw	r3, #35208	; 0x8988
 800067e:	443b      	add	r3, r7
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8000686:	d3bd      	bcc.n	8000604 <DrawGameOver+0x44>
	for (i = 200; i < 240; i++)
 8000688:	f648 138c 	movw	r3, #35212	; 0x898c
 800068c:	443b      	add	r3, r7
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	3301      	adds	r3, #1
 8000692:	f648 128c 	movw	r2, #35212	; 0x898c
 8000696:	443a      	add	r2, r7
 8000698:	6013      	str	r3, [r2, #0]
 800069a:	f648 138c 	movw	r3, #35212	; 0x898c
 800069e:	443b      	add	r3, r7
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2bef      	cmp	r3, #239	; 0xef
 80006a4:	d9a8      	bls.n	80005f8 <DrawGameOver+0x38>
		}
	}
}
 80006a6:	bf00      	nop
 80006a8:	bf00      	nop
 80006aa:	f507 4709 	add.w	r7, r7, #35072	; 0x8900
 80006ae:	3790      	adds	r7, #144	; 0x90
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	080047bc 	.word	0x080047bc
 80006b8:	20000028 	.word	0x20000028

080006bc <DrawMainCharacter>:

void DrawMainCharacter(uint32_t color, uint32_t y) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	f5ad 5dfa 	sub.w	sp, sp, #8000	; 0x1f40
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 80006ca:	f6a3 734c 	subw	r3, r3, #3916	; 0xf4c
 80006ce:	6018      	str	r0, [r3, #0]
 80006d0:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 80006d4:	f5a3 6375 	sub.w	r3, r3, #3920	; 0xf50
 80006d8:	6019      	str	r1, [r3, #0]
		uint32_t i;
		uint32_t j;
		int matrix[50][40] =
 80006da:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 80006de:	f6a3 7348 	subw	r3, r3, #3912	; 0xf48
 80006e2:	4a3f      	ldr	r2, [pc, #252]	; (80007e0 <DrawMainCharacter+0x124>)
 80006e4:	4618      	mov	r0, r3
 80006e6:	4611      	mov	r1, r2
 80006e8:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80006ec:	461a      	mov	r2, r3
 80006ee:	f004 f84b 	bl	8004788 <memcpy>
		  1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1,
		  1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1,
		  1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
		for (i = y; i < y + 50; i++)
 80006f2:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 80006f6:	f5a3 6375 	sub.w	r3, r3, #3920	; 0xf50
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f641 724c 	movw	r2, #8012	; 0x1f4c
 8000700:	443a      	add	r2, r7
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	e058      	b.n	80007b8 <DrawMainCharacter+0xfc>
		{
			for (j = 220; j < 260; j++)
 8000706:	23dc      	movs	r3, #220	; 0xdc
 8000708:	f641 7248 	movw	r2, #8008	; 0x1f48
 800070c:	443a      	add	r2, r7
 800070e:	6013      	str	r3, [r2, #0]
 8000710:	e042      	b.n	8000798 <DrawMainCharacter+0xdc>
			{
				if (matrix[49 - (i - y)][39 - (j - 220)] == 1) *(__IO uint16_t*) (hltdc.LayerCfg[0].FBStartAdress + (2 * ((106 + i) * hltdc.LayerCfg[0].ImageWidth + j))) = (uint16_t) color;
 8000712:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 8000716:	f5a3 6375 	sub.w	r3, r3, #3920	; 0xf50
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	f641 734c 	movw	r3, #8012	; 0x1f4c
 8000720:	443b      	add	r3, r7
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	1ad3      	subs	r3, r2, r3
 8000726:	f103 0131 	add.w	r1, r3, #49	; 0x31
 800072a:	f641 7348 	movw	r3, #8008	; 0x1f48
 800072e:	443b      	add	r3, r7
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	f240 1203 	movw	r2, #259	; 0x103
 8000736:	1ad2      	subs	r2, r2, r3
 8000738:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 800073c:	f6a3 7048 	subw	r0, r3, #3912	; 0xf48
 8000740:	460b      	mov	r3, r1
 8000742:	009b      	lsls	r3, r3, #2
 8000744:	440b      	add	r3, r1
 8000746:	00db      	lsls	r3, r3, #3
 8000748:	4413      	add	r3, r2
 800074a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800074e:	2b01      	cmp	r3, #1
 8000750:	d119      	bne.n	8000786 <DrawMainCharacter+0xca>
 8000752:	4b24      	ldr	r3, [pc, #144]	; (80007e4 <DrawMainCharacter+0x128>)
 8000754:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000756:	f641 734c 	movw	r3, #8012	; 0x1f4c
 800075a:	443b      	add	r3, r7
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	336a      	adds	r3, #106	; 0x6a
 8000760:	4920      	ldr	r1, [pc, #128]	; (80007e4 <DrawMainCharacter+0x128>)
 8000762:	6e09      	ldr	r1, [r1, #96]	; 0x60
 8000764:	fb03 f101 	mul.w	r1, r3, r1
 8000768:	f641 7348 	movw	r3, #8008	; 0x1f48
 800076c:	443b      	add	r3, r7
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	440b      	add	r3, r1
 8000772:	005b      	lsls	r3, r3, #1
 8000774:	4413      	add	r3, r2
 8000776:	461a      	mov	r2, r3
 8000778:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 800077c:	f6a3 734c 	subw	r3, r3, #3916	; 0xf4c
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	b29b      	uxth	r3, r3
 8000784:	8013      	strh	r3, [r2, #0]
			for (j = 220; j < 260; j++)
 8000786:	f641 7348 	movw	r3, #8008	; 0x1f48
 800078a:	443b      	add	r3, r7
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	3301      	adds	r3, #1
 8000790:	f641 7248 	movw	r2, #8008	; 0x1f48
 8000794:	443a      	add	r2, r7
 8000796:	6013      	str	r3, [r2, #0]
 8000798:	f641 7348 	movw	r3, #8008	; 0x1f48
 800079c:	443b      	add	r3, r7
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80007a4:	d3b5      	bcc.n	8000712 <DrawMainCharacter+0x56>
		for (i = y; i < y + 50; i++)
 80007a6:	f641 734c 	movw	r3, #8012	; 0x1f4c
 80007aa:	443b      	add	r3, r7
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	3301      	adds	r3, #1
 80007b0:	f641 724c 	movw	r2, #8012	; 0x1f4c
 80007b4:	443a      	add	r2, r7
 80007b6:	6013      	str	r3, [r2, #0]
 80007b8:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 80007bc:	f5a3 6375 	sub.w	r3, r3, #3920	; 0xf50
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	3332      	adds	r3, #50	; 0x32
 80007c4:	f641 724c 	movw	r2, #8012	; 0x1f4c
 80007c8:	443a      	add	r2, r7
 80007ca:	6812      	ldr	r2, [r2, #0]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d39a      	bcc.n	8000706 <DrawMainCharacter+0x4a>
			}
		}
}
 80007d0:	bf00      	nop
 80007d2:	bf00      	nop
 80007d4:	f507 57fa 	add.w	r7, r7, #8000	; 0x1f40
 80007d8:	3710      	adds	r7, #16
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	0800d13c 	.word	0x0800d13c
 80007e4:	20000028 	.word	0x20000028

080007e8 <DrawObstacle>:

void DrawObstacle(uint32_t color, uint32_t x) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	f5ad 6d30 	sub.w	sp, sp, #2816	; 0xb00
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80007f4:	f6a3 23fc 	subw	r3, r3, #2812	; 0xafc
 80007f8:	6018      	str	r0, [r3, #0]
 80007fa:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80007fe:	f5a3 6330 	sub.w	r3, r3, #2816	; 0xb00
 8000802:	6019      	str	r1, [r3, #0]
		uint32_t i;
		uint32_t j;
		int matrix[35][20] =
 8000804:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8000808:	f6a3 23f8 	subw	r3, r3, #2808	; 0xaf8
 800080c:	4a31      	ldr	r2, [pc, #196]	; (80008d4 <DrawObstacle+0xec>)
 800080e:	4618      	mov	r0, r3
 8000810:	4611      	mov	r1, r2
 8000812:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 8000816:	461a      	mov	r2, r3
 8000818:	f003 ffb6 	bl	8004788 <memcpy>
		 {0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0}};
		for (i = 0; i < 35; i++)
 800081c:	2300      	movs	r3, #0
 800081e:	f8c7 3afc 	str.w	r3, [r7, #2812]	; 0xafc
 8000822:	e04c      	b.n	80008be <DrawObstacle+0xd6>
		{
			for (j = x; j < x + 20; j++)
 8000824:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8000828:	f5a3 6330 	sub.w	r3, r3, #2816	; 0xb00
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f8c7 3af8 	str.w	r3, [r7, #2808]	; 0xaf8
 8000832:	e035      	b.n	80008a0 <DrawObstacle+0xb8>
			{
				if (matrix[34 - i][19 - (j - x)] == 1) *(__IO uint16_t*) (hltdc.LayerCfg[0].FBStartAdress + (2 * ((106 + i) * hltdc.LayerCfg[0].ImageWidth + j))) = (uint16_t) color;
 8000834:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8000838:	f1c3 0222 	rsb	r2, r3, #34	; 0x22
 800083c:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8000840:	f5a3 6330 	sub.w	r3, r3, #2816	; 0xb00
 8000844:	6819      	ldr	r1, [r3, #0]
 8000846:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 800084a:	1acb      	subs	r3, r1, r3
 800084c:	f103 0013 	add.w	r0, r3, #19
 8000850:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8000854:	f6a3 21f8 	subw	r1, r3, #2808	; 0xaf8
 8000858:	4613      	mov	r3, r2
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	4413      	add	r3, r2
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	4403      	add	r3, r0
 8000862:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000866:	2b01      	cmp	r3, #1
 8000868:	d115      	bne.n	8000896 <DrawObstacle+0xae>
 800086a:	4b1b      	ldr	r3, [pc, #108]	; (80008d8 <DrawObstacle+0xf0>)
 800086c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800086e:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8000872:	336a      	adds	r3, #106	; 0x6a
 8000874:	4918      	ldr	r1, [pc, #96]	; (80008d8 <DrawObstacle+0xf0>)
 8000876:	6e09      	ldr	r1, [r1, #96]	; 0x60
 8000878:	fb03 f101 	mul.w	r1, r3, r1
 800087c:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 8000880:	440b      	add	r3, r1
 8000882:	005b      	lsls	r3, r3, #1
 8000884:	4413      	add	r3, r2
 8000886:	461a      	mov	r2, r3
 8000888:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 800088c:	f6a3 23fc 	subw	r3, r3, #2812	; 0xafc
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	b29b      	uxth	r3, r3
 8000894:	8013      	strh	r3, [r2, #0]
			for (j = x; j < x + 20; j++)
 8000896:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 800089a:	3301      	adds	r3, #1
 800089c:	f8c7 3af8 	str.w	r3, [r7, #2808]	; 0xaf8
 80008a0:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80008a4:	f5a3 6330 	sub.w	r3, r3, #2816	; 0xb00
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	3314      	adds	r3, #20
 80008ac:	f8d7 2af8 	ldr.w	r2, [r7, #2808]	; 0xaf8
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d3bf      	bcc.n	8000834 <DrawObstacle+0x4c>
		for (i = 0; i < 35; i++)
 80008b4:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 80008b8:	3301      	adds	r3, #1
 80008ba:	f8c7 3afc 	str.w	r3, [r7, #2812]	; 0xafc
 80008be:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 80008c2:	2b22      	cmp	r3, #34	; 0x22
 80008c4:	d9ae      	bls.n	8000824 <DrawObstacle+0x3c>
			}
		}
}
 80008c6:	bf00      	nop
 80008c8:	bf00      	nop
 80008ca:	f507 6730 	add.w	r7, r7, #2816	; 0xb00
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	0800f07c 	.word	0x0800f07c
 80008d8:	20000028 	.word	0x20000028

080008dc <DrawLegsClear>:

void DrawLegsClear(uint32_t color) {
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t j;
	for (i = 0; i < 9; i++)
 80008e4:	2300      	movs	r3, #0
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	e01b      	b.n	8000922 <DrawLegsClear+0x46>
	{
		for (j = 220; j < 260; j++)
 80008ea:	23dc      	movs	r3, #220	; 0xdc
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	e011      	b.n	8000914 <DrawLegsClear+0x38>
		{
			*(__IO uint16_t*) (hltdc.LayerCfg[0].FBStartAdress + (2 * ((i + 106) * hltdc.LayerCfg[0].ImageWidth + j))) = (uint16_t) color;
 80008f0:	4b11      	ldr	r3, [pc, #68]	; (8000938 <DrawLegsClear+0x5c>)
 80008f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	336a      	adds	r3, #106	; 0x6a
 80008f8:	490f      	ldr	r1, [pc, #60]	; (8000938 <DrawLegsClear+0x5c>)
 80008fa:	6e09      	ldr	r1, [r1, #96]	; 0x60
 80008fc:	fb03 f101 	mul.w	r1, r3, r1
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	440b      	add	r3, r1
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	4413      	add	r3, r2
 8000908:	687a      	ldr	r2, [r7, #4]
 800090a:	b292      	uxth	r2, r2
 800090c:	801a      	strh	r2, [r3, #0]
		for (j = 220; j < 260; j++)
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	3301      	adds	r3, #1
 8000912:	60bb      	str	r3, [r7, #8]
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800091a:	d3e9      	bcc.n	80008f0 <DrawLegsClear+0x14>
	for (i = 0; i < 9; i++)
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	3301      	adds	r3, #1
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	2b08      	cmp	r3, #8
 8000926:	d9e0      	bls.n	80008ea <DrawLegsClear+0xe>
		}
	}
}
 8000928:	bf00      	nop
 800092a:	bf00      	nop
 800092c:	3714      	adds	r7, #20
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	20000028 	.word	0x20000028

0800093c <DrawLegsMainCharacter>:

void DrawLegsMainCharacter(uint32_t color, int flag) {
 800093c:	b580      	push	{r7, lr}
 800093e:	f5ad 6d35 	sub.w	sp, sp, #2896	; 0xb50
 8000942:	af00      	add	r7, sp, #0
 8000944:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000948:	f6a3 334c 	subw	r3, r3, #2892	; 0xb4c
 800094c:	6018      	str	r0, [r3, #0]
 800094e:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000952:	f5a3 6335 	sub.w	r3, r3, #2896	; 0xb50
 8000956:	6019      	str	r1, [r3, #0]
	uint32_t i;
	uint32_t j;
	int matrix1[9][40] =
 8000958:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 800095c:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000960:	4618      	mov	r0, r3
 8000962:	f44f 63b4 	mov.w	r3, #1440	; 0x5a0
 8000966:	461a      	mov	r2, r3
 8000968:	2100      	movs	r1, #0
 800096a:	f003 fee1 	bl	8004730 <memset>
 800096e:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000972:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000976:	2201      	movs	r2, #1
 8000978:	631a      	str	r2, [r3, #48]	; 0x30
 800097a:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 800097e:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000982:	2201      	movs	r2, #1
 8000984:	635a      	str	r2, [r3, #52]	; 0x34
 8000986:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 800098a:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 800098e:	2201      	movs	r2, #1
 8000990:	639a      	str	r2, [r3, #56]	; 0x38
 8000992:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000996:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 800099a:	2201      	movs	r2, #1
 800099c:	63da      	str	r2, [r3, #60]	; 0x3c
 800099e:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 80009a2:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 80009a6:	2201      	movs	r2, #1
 80009a8:	641a      	str	r2, [r3, #64]	; 0x40
 80009aa:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 80009ae:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 80009b2:	2201      	movs	r2, #1
 80009b4:	645a      	str	r2, [r3, #68]	; 0x44
 80009b6:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 80009ba:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 80009be:	2201      	movs	r2, #1
 80009c0:	649a      	str	r2, [r3, #72]	; 0x48
 80009c2:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 80009c6:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 80009ca:	2201      	movs	r2, #1
 80009cc:	64da      	str	r2, [r3, #76]	; 0x4c
 80009ce:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 80009d2:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 80009d6:	2201      	movs	r2, #1
 80009d8:	651a      	str	r2, [r3, #80]	; 0x50
 80009da:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 80009de:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 80009e2:	2201      	movs	r2, #1
 80009e4:	655a      	str	r2, [r3, #84]	; 0x54
 80009e6:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 80009ea:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 80009ee:	2201      	movs	r2, #1
 80009f0:	659a      	str	r2, [r3, #88]	; 0x58
 80009f2:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 80009f6:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 80009fa:	2201      	movs	r2, #1
 80009fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80009fe:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000a02:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000a06:	2201      	movs	r2, #1
 8000a08:	661a      	str	r2, [r3, #96]	; 0x60
 8000a0a:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000a0e:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000a12:	2201      	movs	r2, #1
 8000a14:	665a      	str	r2, [r3, #100]	; 0x64
 8000a16:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000a1a:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000a1e:	2201      	movs	r2, #1
 8000a20:	669a      	str	r2, [r3, #104]	; 0x68
 8000a22:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000a26:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	66da      	str	r2, [r3, #108]	; 0x6c
 8000a2e:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000a32:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000a36:	2201      	movs	r2, #1
 8000a38:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8000a3c:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000a40:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000a44:	2201      	movs	r2, #1
 8000a46:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8000a4a:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000a4e:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000a52:	2201      	movs	r2, #1
 8000a54:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000a58:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000a5c:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000a60:	2201      	movs	r2, #1
 8000a62:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8000a66:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000a6a:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000a6e:	2201      	movs	r2, #1
 8000a70:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8000a74:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000a78:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 8000a82:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000a86:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8000a90:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000a94:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000a98:	2201      	movs	r2, #1
 8000a9a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8000a9e:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000aa2:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
 8000aac:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000ab0:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
 8000aba:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000abe:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8000ac8:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000acc:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
 8000ad6:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000ada:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000ade:	2201      	movs	r2, #1
 8000ae0:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
 8000ae4:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000ae8:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000aec:	2201      	movs	r2, #1
 8000aee:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 8000af2:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000af6:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000afa:	2201      	movs	r2, #1
 8000afc:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
 8000b00:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000b04:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000b08:	2201      	movs	r2, #1
 8000b0a:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
 8000b0e:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000b12:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000b16:	2201      	movs	r2, #1
 8000b18:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
 8000b1c:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000b20:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000b24:	2201      	movs	r2, #1
 8000b26:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
 8000b2a:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000b2e:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000b32:	2201      	movs	r2, #1
 8000b34:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
 8000b38:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000b3c:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000b40:	2201      	movs	r2, #1
 8000b42:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
 8000b46:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000b4a:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000b4e:	2201      	movs	r2, #1
 8000b50:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
 8000b54:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000b58:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
 8000b62:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000b66:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 8000b70:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000b74:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000b78:	2201      	movs	r2, #1
 8000b7a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 8000b7e:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000b82:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000b86:	2201      	movs	r2, #1
 8000b88:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
 8000b8c:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000b90:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000b94:	2201      	movs	r2, #1
 8000b96:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
 8000b9a:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000b9e:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
 8000ba8:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000bac:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
 8000bb6:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000bba:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
 8000bc4:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000bc8:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000bcc:	2201      	movs	r2, #1
 8000bce:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
 8000bd2:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000bd6:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000bda:	2201      	movs	r2, #1
 8000bdc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
 8000be0:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000be4:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000be8:	2201      	movs	r2, #1
 8000bea:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
 8000bee:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000bf2:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc
 8000bfc:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000c00:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000c04:	2201      	movs	r2, #1
 8000c06:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0
 8000c0a:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000c0e:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000c12:	2201      	movs	r2, #1
 8000c14:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
 8000c18:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000c1c:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000c20:	2201      	movs	r2, #1
 8000c22:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
 8000c26:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000c2a:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000c2e:	2201      	movs	r2, #1
 8000c30:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
 8000c34:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000c38:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	f8c3 2360 	str.w	r2, [r3, #864]	; 0x360
 8000c42:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000c46:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
 8000c50:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000c54:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000c58:	2201      	movs	r2, #1
 8000c5a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
 8000c5e:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000c62:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000c66:	2201      	movs	r2, #1
 8000c68:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
 8000c6c:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000c70:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000c74:	2201      	movs	r2, #1
 8000c76:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
 8000c7a:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000c7e:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000c82:	2201      	movs	r2, #1
 8000c84:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
 8000c88:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000c8c:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000c90:	2201      	movs	r2, #1
 8000c92:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
 8000c96:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000c9a:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8000ca4:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000ca8:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000cac:	2201      	movs	r2, #1
 8000cae:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
 8000cb2:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000cb6:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000cba:	2201      	movs	r2, #1
 8000cbc:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
 8000cc0:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000cc4:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000cc8:	2201      	movs	r2, #1
 8000cca:	f8c3 24a0 	str.w	r2, [r3, #1184]	; 0x4a0
 8000cce:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000cd2:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
 8000cdc:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000ce0:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
 8000cea:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000cee:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
 8000cf8:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000cfc:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000d00:	2201      	movs	r2, #1
 8000d02:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
 8000d06:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000d0a:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000d0e:	2201      	movs	r2, #1
 8000d10:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
	  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
	  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
	  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
	int matrix0[9][40] =
 8000d14:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000d18:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f44f 63b4 	mov.w	r3, #1440	; 0x5a0
 8000d22:	461a      	mov	r2, r3
 8000d24:	2100      	movs	r1, #0
 8000d26:	f003 fd03 	bl	8004730 <memset>
 8000d2a:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000d2e:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8000d32:	2201      	movs	r2, #1
 8000d34:	631a      	str	r2, [r3, #48]	; 0x30
 8000d36:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000d3a:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8000d3e:	2201      	movs	r2, #1
 8000d40:	635a      	str	r2, [r3, #52]	; 0x34
 8000d42:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000d46:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	639a      	str	r2, [r3, #56]	; 0x38
 8000d4e:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000d52:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8000d56:	2201      	movs	r2, #1
 8000d58:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d5a:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000d5e:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8000d62:	2201      	movs	r2, #1
 8000d64:	641a      	str	r2, [r3, #64]	; 0x40
 8000d66:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000d6a:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8000d6e:	2201      	movs	r2, #1
 8000d70:	645a      	str	r2, [r3, #68]	; 0x44
 8000d72:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000d76:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	649a      	str	r2, [r3, #72]	; 0x48
 8000d7e:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000d82:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8000d86:	2201      	movs	r2, #1
 8000d88:	64da      	str	r2, [r3, #76]	; 0x4c
 8000d8a:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000d8e:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8000d92:	2201      	movs	r2, #1
 8000d94:	651a      	str	r2, [r3, #80]	; 0x50
 8000d96:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000d9a:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8000d9e:	2201      	movs	r2, #1
 8000da0:	655a      	str	r2, [r3, #84]	; 0x54
 8000da2:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000da6:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8000daa:	2201      	movs	r2, #1
 8000dac:	659a      	str	r2, [r3, #88]	; 0x58
 8000dae:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000db2:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8000db6:	2201      	movs	r2, #1
 8000db8:	65da      	str	r2, [r3, #92]	; 0x5c
 8000dba:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000dbe:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	661a      	str	r2, [r3, #96]	; 0x60
 8000dc6:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000dca:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8000dce:	2201      	movs	r2, #1
 8000dd0:	665a      	str	r2, [r3, #100]	; 0x64
 8000dd2:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000dd6:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8000dda:	2201      	movs	r2, #1
 8000ddc:	669a      	str	r2, [r3, #104]	; 0x68
 8000dde:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000de2:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8000de6:	2201      	movs	r2, #1
 8000de8:	66da      	str	r2, [r3, #108]	; 0x6c
 8000dea:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000dee:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8000df2:	2201      	movs	r2, #1
 8000df4:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8000df8:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000dfc:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8000e00:	2201      	movs	r2, #1
 8000e02:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8000e06:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000e0a:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8000e0e:	2201      	movs	r2, #1
 8000e10:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000e14:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000e18:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8000e22:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000e26:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8000e30:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000e34:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8000e38:	2201      	movs	r2, #1
 8000e3a:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 8000e3e:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000e42:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8000e46:	2201      	movs	r2, #1
 8000e48:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8000e4c:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000e50:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8000e54:	2201      	movs	r2, #1
 8000e56:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8000e5a:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000e5e:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8000e62:	2201      	movs	r2, #1
 8000e64:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
 8000e68:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000e6c:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8000e70:	2201      	movs	r2, #1
 8000e72:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
 8000e76:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000e7a:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8000e7e:	2201      	movs	r2, #1
 8000e80:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8000e84:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000e88:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
 8000e92:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000e96:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
 8000ea0:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000ea4:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 8000eae:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000eb2:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
 8000ebc:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000ec0:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
 8000eca:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000ece:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
 8000ed8:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000edc:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
 8000ee6:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000eea:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8000eee:	2201      	movs	r2, #1
 8000ef0:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
 8000ef4:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000ef8:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8000efc:	2201      	movs	r2, #1
 8000efe:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
 8000f02:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000f06:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
 8000f10:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000f14:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8000f18:	2201      	movs	r2, #1
 8000f1a:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
 8000f1e:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000f22:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8000f26:	2201      	movs	r2, #1
 8000f28:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 8000f2c:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000f30:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8000f34:	2201      	movs	r2, #1
 8000f36:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 8000f3a:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000f3e:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8000f42:	2201      	movs	r2, #1
 8000f44:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
 8000f48:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000f4c:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8000f50:	2201      	movs	r2, #1
 8000f52:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
 8000f56:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000f5a:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8000f5e:	2201      	movs	r2, #1
 8000f60:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
 8000f64:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000f68:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
 8000f72:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000f76:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
 8000f80:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000f84:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8000f88:	2201      	movs	r2, #1
 8000f8a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
 8000f8e:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000f92:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8000f96:	2201      	movs	r2, #1
 8000f98:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
 8000f9c:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000fa0:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
 8000faa:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000fae:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
 8000fb8:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000fbc:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc
 8000fc6:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000fca:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8000fce:	2201      	movs	r2, #1
 8000fd0:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0
 8000fd4:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000fd8:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8000fdc:	2201      	movs	r2, #1
 8000fde:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
 8000fe2:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000fe6:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8000fea:	2201      	movs	r2, #1
 8000fec:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
 8000ff0:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000ff4:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f8c3 2360 	str.w	r2, [r3, #864]	; 0x360
 8000ffe:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8001002:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8001006:	2201      	movs	r2, #1
 8001008:	f8c3 2364 	str.w	r2, [r3, #868]	; 0x364
 800100c:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8001010:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8001014:	2201      	movs	r2, #1
 8001016:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
 800101a:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 800101e:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8001022:	2201      	movs	r2, #1
 8001024:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
 8001028:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 800102c:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8001030:	2201      	movs	r2, #1
 8001032:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
 8001036:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 800103a:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 800103e:	2201      	movs	r2, #1
 8001040:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 8001044:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8001048:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 800104c:	2201      	movs	r2, #1
 800104e:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 8001052:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8001056:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 800105a:	2201      	movs	r2, #1
 800105c:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 8001060:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8001064:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8001068:	2201      	movs	r2, #1
 800106a:	f8c3 24b8 	str.w	r2, [r3, #1208]	; 0x4b8
 800106e:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8001072:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8001076:	2201      	movs	r2, #1
 8001078:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
 800107c:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8001080:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8001084:	2201      	movs	r2, #1
 8001086:	f8c3 24c0 	str.w	r2, [r3, #1216]	; 0x4c0
 800108a:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 800108e:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 8001092:	2201      	movs	r2, #1
 8001094:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4
 8001098:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 800109c:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 80010a0:	2201      	movs	r2, #1
 80010a2:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
 80010a6:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 80010aa:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 80010ae:	2201      	movs	r2, #1
 80010b0:	f8c3 255c 	str.w	r2, [r3, #1372]	; 0x55c
 80010b4:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 80010b8:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 80010bc:	2201      	movs	r2, #1
 80010be:	f8c3 2560 	str.w	r2, [r3, #1376]	; 0x560
 80010c2:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 80010c6:	f6a3 3348 	subw	r3, r3, #2888	; 0xb48
 80010ca:	2201      	movs	r2, #1
 80010cc:	f8c3 2564 	str.w	r2, [r3, #1380]	; 0x564
	  1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,
	  1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,
	  1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
	if (flag == 0) {
 80010d0:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 80010d4:	f5a3 6335 	sub.w	r3, r3, #2896	; 0xb50
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d147      	bne.n	800116e <DrawLegsMainCharacter+0x832>
		for (i = 0; i < 9; i++)
 80010de:	2300      	movs	r3, #0
 80010e0:	f8c7 3b4c 	str.w	r3, [r7, #2892]	; 0xb4c
 80010e4:	e03e      	b.n	8001164 <DrawLegsMainCharacter+0x828>
				{
					for (j = 220; j < 260; j++)
 80010e6:	23dc      	movs	r3, #220	; 0xdc
 80010e8:	f8c7 3b48 	str.w	r3, [r7, #2888]	; 0xb48
 80010ec:	e030      	b.n	8001150 <DrawLegsMainCharacter+0x814>
					{
						if (matrix0[8 - i][39 - (j - 220)] == 1) *(__IO uint16_t*) (hltdc.LayerCfg[0].FBStartAdress + (2 * ((106 + i) * hltdc.LayerCfg[0].ImageWidth + j))) = (uint16_t) color;
 80010ee:	f8d7 3b4c 	ldr.w	r3, [r7, #2892]	; 0xb4c
 80010f2:	f1c3 0108 	rsb	r1, r3, #8
 80010f6:	f8d7 3b48 	ldr.w	r3, [r7, #2888]	; 0xb48
 80010fa:	f240 1203 	movw	r2, #259	; 0x103
 80010fe:	1ad2      	subs	r2, r2, r3
 8001100:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8001104:	f6a3 3048 	subw	r0, r3, #2888	; 0xb48
 8001108:	460b      	mov	r3, r1
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	440b      	add	r3, r1
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	4413      	add	r3, r2
 8001112:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d115      	bne.n	8001146 <DrawLegsMainCharacter+0x80a>
 800111a:	4b3b      	ldr	r3, [pc, #236]	; (8001208 <DrawLegsMainCharacter+0x8cc>)
 800111c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800111e:	f8d7 3b4c 	ldr.w	r3, [r7, #2892]	; 0xb4c
 8001122:	336a      	adds	r3, #106	; 0x6a
 8001124:	4938      	ldr	r1, [pc, #224]	; (8001208 <DrawLegsMainCharacter+0x8cc>)
 8001126:	6e09      	ldr	r1, [r1, #96]	; 0x60
 8001128:	fb03 f101 	mul.w	r1, r3, r1
 800112c:	f8d7 3b48 	ldr.w	r3, [r7, #2888]	; 0xb48
 8001130:	440b      	add	r3, r1
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	4413      	add	r3, r2
 8001136:	461a      	mov	r2, r3
 8001138:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 800113c:	f6a3 334c 	subw	r3, r3, #2892	; 0xb4c
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	b29b      	uxth	r3, r3
 8001144:	8013      	strh	r3, [r2, #0]
					for (j = 220; j < 260; j++)
 8001146:	f8d7 3b48 	ldr.w	r3, [r7, #2888]	; 0xb48
 800114a:	3301      	adds	r3, #1
 800114c:	f8c7 3b48 	str.w	r3, [r7, #2888]	; 0xb48
 8001150:	f8d7 3b48 	ldr.w	r3, [r7, #2888]	; 0xb48
 8001154:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001158:	d3c9      	bcc.n	80010ee <DrawLegsMainCharacter+0x7b2>
		for (i = 0; i < 9; i++)
 800115a:	f8d7 3b4c 	ldr.w	r3, [r7, #2892]	; 0xb4c
 800115e:	3301      	adds	r3, #1
 8001160:	f8c7 3b4c 	str.w	r3, [r7, #2892]	; 0xb4c
 8001164:	f8d7 3b4c 	ldr.w	r3, [r7, #2892]	; 0xb4c
 8001168:	2b08      	cmp	r3, #8
 800116a:	d9bc      	bls.n	80010e6 <DrawLegsMainCharacter+0x7aa>
					{
						if (matrix1[8 - i][39 - (j - 220)] == 1) *(__IO uint16_t*) (hltdc.LayerCfg[0].FBStartAdress + (2 * ((106 + i) * hltdc.LayerCfg[0].ImageWidth + j))) = (uint16_t) color;
					}
				}
	}
}
 800116c:	e046      	b.n	80011fc <DrawLegsMainCharacter+0x8c0>
		for (i = 0; i < 9; i++)
 800116e:	2300      	movs	r3, #0
 8001170:	f8c7 3b4c 	str.w	r3, [r7, #2892]	; 0xb4c
 8001174:	e03e      	b.n	80011f4 <DrawLegsMainCharacter+0x8b8>
					for (j = 220; j < 260; j++)
 8001176:	23dc      	movs	r3, #220	; 0xdc
 8001178:	f8c7 3b48 	str.w	r3, [r7, #2888]	; 0xb48
 800117c:	e030      	b.n	80011e0 <DrawLegsMainCharacter+0x8a4>
						if (matrix1[8 - i][39 - (j - 220)] == 1) *(__IO uint16_t*) (hltdc.LayerCfg[0].FBStartAdress + (2 * ((106 + i) * hltdc.LayerCfg[0].ImageWidth + j))) = (uint16_t) color;
 800117e:	f8d7 3b4c 	ldr.w	r3, [r7, #2892]	; 0xb4c
 8001182:	f1c3 0108 	rsb	r1, r3, #8
 8001186:	f8d7 3b48 	ldr.w	r3, [r7, #2888]	; 0xb48
 800118a:	f240 1203 	movw	r2, #259	; 0x103
 800118e:	1ad2      	subs	r2, r2, r3
 8001190:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8001194:	f5a3 60b5 	sub.w	r0, r3, #1448	; 0x5a8
 8001198:	460b      	mov	r3, r1
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	440b      	add	r3, r1
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	4413      	add	r3, r2
 80011a2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d115      	bne.n	80011d6 <DrawLegsMainCharacter+0x89a>
 80011aa:	4b17      	ldr	r3, [pc, #92]	; (8001208 <DrawLegsMainCharacter+0x8cc>)
 80011ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80011ae:	f8d7 3b4c 	ldr.w	r3, [r7, #2892]	; 0xb4c
 80011b2:	336a      	adds	r3, #106	; 0x6a
 80011b4:	4914      	ldr	r1, [pc, #80]	; (8001208 <DrawLegsMainCharacter+0x8cc>)
 80011b6:	6e09      	ldr	r1, [r1, #96]	; 0x60
 80011b8:	fb03 f101 	mul.w	r1, r3, r1
 80011bc:	f8d7 3b48 	ldr.w	r3, [r7, #2888]	; 0xb48
 80011c0:	440b      	add	r3, r1
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	4413      	add	r3, r2
 80011c6:	461a      	mov	r2, r3
 80011c8:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 80011cc:	f6a3 334c 	subw	r3, r3, #2892	; 0xb4c
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	8013      	strh	r3, [r2, #0]
					for (j = 220; j < 260; j++)
 80011d6:	f8d7 3b48 	ldr.w	r3, [r7, #2888]	; 0xb48
 80011da:	3301      	adds	r3, #1
 80011dc:	f8c7 3b48 	str.w	r3, [r7, #2888]	; 0xb48
 80011e0:	f8d7 3b48 	ldr.w	r3, [r7, #2888]	; 0xb48
 80011e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80011e8:	d3c9      	bcc.n	800117e <DrawLegsMainCharacter+0x842>
		for (i = 0; i < 9; i++)
 80011ea:	f8d7 3b4c 	ldr.w	r3, [r7, #2892]	; 0xb4c
 80011ee:	3301      	adds	r3, #1
 80011f0:	f8c7 3b4c 	str.w	r3, [r7, #2892]	; 0xb4c
 80011f4:	f8d7 3b4c 	ldr.w	r3, [r7, #2892]	; 0xb4c
 80011f8:	2b08      	cmp	r3, #8
 80011fa:	d9bc      	bls.n	8001176 <DrawLegsMainCharacter+0x83a>
}
 80011fc:	bf00      	nop
 80011fe:	f507 6735 	add.w	r7, r7, #2896	; 0xb50
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000028 	.word	0x20000028

0800120c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001210:	f3bf 8f4f 	dsb	sy
}
 8001214:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001216:	f3bf 8f6f 	isb	sy
}
 800121a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800121c:	4b0d      	ldr	r3, [pc, #52]	; (8001254 <SCB_EnableICache+0x48>)
 800121e:	2200      	movs	r2, #0
 8001220:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001224:	f3bf 8f4f 	dsb	sy
}
 8001228:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800122a:	f3bf 8f6f 	isb	sy
}
 800122e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001230:	4b08      	ldr	r3, [pc, #32]	; (8001254 <SCB_EnableICache+0x48>)
 8001232:	695b      	ldr	r3, [r3, #20]
 8001234:	4a07      	ldr	r2, [pc, #28]	; (8001254 <SCB_EnableICache+0x48>)
 8001236:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800123a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800123c:	f3bf 8f4f 	dsb	sy
}
 8001240:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001242:	f3bf 8f6f 	isb	sy
}
 8001246:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800125e:	4b1f      	ldr	r3, [pc, #124]	; (80012dc <SCB_EnableDCache+0x84>)
 8001260:	2200      	movs	r2, #0
 8001262:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001266:	f3bf 8f4f 	dsb	sy
}
 800126a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800126c:	4b1b      	ldr	r3, [pc, #108]	; (80012dc <SCB_EnableDCache+0x84>)
 800126e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001272:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	0b5b      	lsrs	r3, r3, #13
 8001278:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800127c:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	08db      	lsrs	r3, r3, #3
 8001282:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001286:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	015a      	lsls	r2, r3, #5
 800128c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001290:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001296:	4911      	ldr	r1, [pc, #68]	; (80012dc <SCB_EnableDCache+0x84>)
 8001298:	4313      	orrs	r3, r2
 800129a:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	1e5a      	subs	r2, r3, #1
 80012a2:	60ba      	str	r2, [r7, #8]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d1ef      	bne.n	8001288 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	1e5a      	subs	r2, r3, #1
 80012ac:	60fa      	str	r2, [r7, #12]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d1e5      	bne.n	800127e <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80012b2:	f3bf 8f4f 	dsb	sy
}
 80012b6:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80012b8:	4b08      	ldr	r3, [pc, #32]	; (80012dc <SCB_EnableDCache+0x84>)
 80012ba:	695b      	ldr	r3, [r3, #20]
 80012bc:	4a07      	ldr	r2, [pc, #28]	; (80012dc <SCB_EnableDCache+0x84>)
 80012be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80012c4:	f3bf 8f4f 	dsb	sy
}
 80012c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012ca:	f3bf 8f6f 	isb	sy
}
 80012ce:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80012d0:	bf00      	nop
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int counter = 0;
const int max_counter = 10000;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
        if(htim->Instance == TIM3) //check if the interrupt comes from TIM3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a0b      	ldr	r2, [pc, #44]	; (800131c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d10d      	bne.n	800130e <HAL_TIM_PeriodElapsedCallback+0x2e>
        {
            counter++;
 80012f2:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	3301      	adds	r3, #1
 80012f8:	4a09      	ldr	r2, [pc, #36]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80012fa:	6013      	str	r3, [r2, #0]
            if (counter == max_counter) counter = 0;
 80012fc:	4b08      	ldr	r3, [pc, #32]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f242 7210 	movw	r2, #10000	; 0x2710
 8001304:	4293      	cmp	r3, r2
 8001306:	d102      	bne.n	800130e <HAL_TIM_PeriodElapsedCallback+0x2e>
 8001308:	4b05      	ldr	r3, [pc, #20]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
        }
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	40000400 	.word	0x40000400
 8001320:	2003fd2c 	.word	0x2003fd2c

08001324 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b094      	sub	sp, #80	; 0x50
 8001328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int flagJump = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	64fb      	str	r3, [r7, #76]	; 0x4c
	int flagRun = 1;
 800132e:	2301      	movs	r3, #1
 8001330:	64bb      	str	r3, [r7, #72]	; 0x48
	int flagLegs = 1;
 8001332:	2301      	movs	r3, #1
 8001334:	647b      	str	r3, [r7, #68]	; 0x44
	int flagTimerFix = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	643b      	str	r3, [r7, #64]	; 0x40
	int flagSecondFirst = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	63fb      	str	r3, [r7, #60]	; 0x3c
//	int flagSpeed = 1;
	int GameOn = 1;
 800133e:	2301      	movs	r3, #1
 8001340:	63bb      	str	r3, [r7, #56]	; 0x38
	int speed = 20;
 8001342:	2314      	movs	r3, #20
 8001344:	60fb      	str	r3, [r7, #12]
	int limit = 460;
 8001346:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
 800134a:	60bb      	str	r3, [r7, #8]
	int Step = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	637b      	str	r3, [r7, #52]	; 0x34
	int tipaRand = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t x1 = limit + 1, x2 = limit + 1, y = 0;
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	3301      	adds	r3, #1
 8001358:	62fb      	str	r3, [r7, #44]	; 0x2c
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	3301      	adds	r3, #1
 800135e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001360:	2300      	movs	r3, #0
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t color;
	uint32_t color1 = (uint32_t)0xFFFF;
 8001364:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001368:	623b      	str	r3, [r7, #32]
	uint32_t color2 = (uint32_t)0;
 800136a:	2300      	movs	r3, #0
 800136c:	61fb      	str	r3, [r7, #28]
	int counter_step = 1500;
 800136e:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001372:	607b      	str	r3, [r7, #4]
	int prev_counter = -1;
 8001374:	f04f 33ff 	mov.w	r3, #4294967295
 8001378:	61bb      	str	r3, [r7, #24]
	int counter_button = counter_step - 1;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	3b01      	subs	r3, #1
 800137e:	617b      	str	r3, [r7, #20]
	int num_of_obstacles = 0;
 8001380:	2300      	movs	r3, #0
 8001382:	613b      	str	r3, [r7, #16]
  /* USER CODE END 1 */
/* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001384:	f7ff ff42 	bl	800120c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8001388:	f7ff ff66 	bl	8001258 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800138c:	f000 fdf9 	bl	8001f82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001390:	f000 fa18 	bl	80017c4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001394:	f000 fa84 	bl	80018a0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001398:	f000 fb92 	bl	8001ac0 <MX_GPIO_Init>
  MX_LTDC_Init();
 800139c:	f000 faac 	bl	80018f8 <MX_LTDC_Init>
  MX_RNG_Init();
 80013a0:	f000 fb2c 	bl	80019fc <MX_RNG_Init>
  MX_TIM3_Init();
 80013a4:	f000 fb3e 	bl	8001a24 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_LTDC_SetAddress(&hltdc,(uint32_t) &RGB565_480x272,0);
 80013a8:	4b87      	ldr	r3, [pc, #540]	; (80015c8 <main+0x2a4>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	4619      	mov	r1, r3
 80013ae:	4887      	ldr	r0, [pc, #540]	; (80015cc <main+0x2a8>)
 80013b0:	f001 fa66 	bl	8002880 <HAL_LTDC_SetAddress>

  __HAL_TIM_CLEAR_FLAG(&htim3, TIM_SR_UIF);
 80013b4:	4b86      	ldr	r3, [pc, #536]	; (80015d0 <main+0x2ac>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f06f 0201 	mvn.w	r2, #1
 80013bc:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim3);
 80013be:	4884      	ldr	r0, [pc, #528]	; (80015d0 <main+0x2ac>)
 80013c0:	f002 fd46 	bl	8003e50 <HAL_TIM_Base_Start_IT>

  FillScreenDayOrNight(color1);
 80013c4:	6a38      	ldr	r0, [r7, #32]
 80013c6:	f7ff f89d 	bl	8000504 <FillScreenDayOrNight>
  DrawLine(color2);
 80013ca:	69f8      	ldr	r0, [r7, #28]
 80013cc:	f7ff f8c0 	bl	8000550 <DrawLine>
  DrawMainCharacter(color2, 0);
 80013d0:	2100      	movs	r1, #0
 80013d2:	69f8      	ldr	r0, [r7, #28]
 80013d4:	f7ff f972 	bl	80006bc <DrawMainCharacter>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (GameOn == 1) {
 80013d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013da:	2b01      	cmp	r3, #1
 80013dc:	f040 81c9 	bne.w	8001772 <main+0x44e>
		  if ((HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_11) == GPIO_PIN_SET ) && (flagJump == -1))
 80013e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013e4:	487b      	ldr	r0, [pc, #492]	; (80015d4 <main+0x2b0>)
 80013e6:	f001 f8e7 	bl	80025b8 <HAL_GPIO_ReadPin>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d108      	bne.n	8001402 <main+0xde>
 80013f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013f6:	d104      	bne.n	8001402 <main+0xde>
		  {
			  flagJump = 1;
 80013f8:	2301      	movs	r3, #1
 80013fa:	64fb      	str	r3, [r7, #76]	; 0x4c
			  tipaRand = counter;
 80013fc:	4b76      	ldr	r3, [pc, #472]	; (80015d8 <main+0x2b4>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	633b      	str	r3, [r7, #48]	; 0x30
		  }
		  if (flagJump == 1)
 8001402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001404:	2b01      	cmp	r3, #1
 8001406:	d113      	bne.n	8001430 <main+0x10c>
		  {
			  if (flagTimerFix == 0) {
 8001408:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800140a:	2b00      	cmp	r3, #0
 800140c:	d104      	bne.n	8001418 <main+0xf4>
				  counter_button = counter;
 800140e:	4b72      	ldr	r3, [pc, #456]	; (80015d8 <main+0x2b4>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	617b      	str	r3, [r7, #20]
				  flagTimerFix = 1;
 8001414:	2301      	movs	r3, #1
 8001416:	643b      	str	r3, [r7, #64]	; 0x40
			  }
			  DrawMainCharacter(color1, 0);
 8001418:	2100      	movs	r1, #0
 800141a:	6a38      	ldr	r0, [r7, #32]
 800141c:	f7ff f94e 	bl	80006bc <DrawMainCharacter>
			  DrawMainCharacter(color2, 40);
 8001420:	2128      	movs	r1, #40	; 0x28
 8001422:	69f8      	ldr	r0, [r7, #28]
 8001424:	f7ff f94a 	bl	80006bc <DrawMainCharacter>
			  y = 40;
 8001428:	2328      	movs	r3, #40	; 0x28
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
			  flagJump = 0;
 800142c:	2300      	movs	r3, #0
 800142e:	64fb      	str	r3, [r7, #76]	; 0x4c
//		  if ((counter % 10000 == 9999) && (speed > 2) && (flagSpeed == 1)) {
//			  speed = speed - 1;
//			  flagSpeed = 0;
//			  counter_step -= 50;
//		  } else flagSpeed = 1;
		  if ((counter == counter_button + counter_step) || ((counter == counter_step - (max_counter - counter_button)) && (counter_button + counter_step >= max_counter))) {
 8001430:	697a      	ldr	r2, [r7, #20]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	441a      	add	r2, r3
 8001436:	4b68      	ldr	r3, [pc, #416]	; (80015d8 <main+0x2b4>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	429a      	cmp	r2, r3
 800143c:	d010      	beq.n	8001460 <main+0x13c>
 800143e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	1ad2      	subs	r2, r2, r3
 800144a:	4b63      	ldr	r3, [pc, #396]	; (80015d8 <main+0x2b4>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	429a      	cmp	r2, r3
 8001450:	d115      	bne.n	800147e <main+0x15a>
 8001452:	697a      	ldr	r2, [r7, #20]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4413      	add	r3, r2
 8001458:	f242 7210 	movw	r2, #10000	; 0x2710
 800145c:	4293      	cmp	r3, r2
 800145e:	db0e      	blt.n	800147e <main+0x15a>
			  DrawMainCharacter(color1, 40);
 8001460:	2128      	movs	r1, #40	; 0x28
 8001462:	6a38      	ldr	r0, [r7, #32]
 8001464:	f7ff f92a 	bl	80006bc <DrawMainCharacter>
			  DrawMainCharacter(color2, 0);
 8001468:	2100      	movs	r1, #0
 800146a:	69f8      	ldr	r0, [r7, #28]
 800146c:	f7ff f926 	bl	80006bc <DrawMainCharacter>
			  y = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
			  flagTimerFix = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	643b      	str	r3, [r7, #64]	; 0x40
			  counter_button = counter_step - 1;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3b01      	subs	r3, #1
 800147c:	617b      	str	r3, [r7, #20]
		  }
		  if (HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_11) == GPIO_PIN_RESET)
 800147e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001482:	4854      	ldr	r0, [pc, #336]	; (80015d4 <main+0x2b0>)
 8001484:	f001 f898 	bl	80025b8 <HAL_GPIO_ReadPin>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d102      	bne.n	8001494 <main+0x170>
		  {
			  flagJump = -1;
 800148e:	f04f 33ff 	mov.w	r3, #4294967295
 8001492:	64fb      	str	r3, [r7, #76]	; 0x4c
		  }
		  if ((counter % speed == speed - 1) && (flagRun == 1)) {
 8001494:	4b50      	ldr	r3, [pc, #320]	; (80015d8 <main+0x2b4>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	68fa      	ldr	r2, [r7, #12]
 800149a:	fb93 f2f2 	sdiv	r2, r3, r2
 800149e:	68f9      	ldr	r1, [r7, #12]
 80014a0:	fb01 f202 	mul.w	r2, r1, r2
 80014a4:	1a9a      	subs	r2, r3, r2
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	3b01      	subs	r3, #1
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d15d      	bne.n	800156a <main+0x246>
 80014ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d15a      	bne.n	800156a <main+0x246>
			  if (x1 < limit) {
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d20f      	bcs.n	80014dc <main+0x1b8>
				  x1 = x1 + 1;
 80014bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014be:	3301      	adds	r3, #1
 80014c0:	62fb      	str	r3, [r7, #44]	; 0x2c
				  flagRun = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	64bb      	str	r3, [r7, #72]	; 0x48
				  DrawObstacle(color1, x1 - 1);
 80014c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014c8:	3b01      	subs	r3, #1
 80014ca:	4619      	mov	r1, r3
 80014cc:	6a38      	ldr	r0, [r7, #32]
 80014ce:	f7ff f98b 	bl	80007e8 <DrawObstacle>
				  DrawObstacle(color2, x1);
 80014d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80014d4:	69f8      	ldr	r0, [r7, #28]
 80014d6:	f7ff f987 	bl	80007e8 <DrawObstacle>
 80014da:	e018      	b.n	800150e <main+0x1ea>
			  } else if (x1 == limit) {
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d114      	bne.n	800150e <main+0x1ea>
				  DrawObstacle(color1, x1 - 1);
 80014e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014e6:	3b01      	subs	r3, #1
 80014e8:	4619      	mov	r1, r3
 80014ea:	6a38      	ldr	r0, [r7, #32]
 80014ec:	f7ff f97c 	bl	80007e8 <DrawObstacle>
				  DrawObstacle(color1, x1);
 80014f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80014f2:	6a38      	ldr	r0, [r7, #32]
 80014f4:	f7ff f978 	bl	80007e8 <DrawObstacle>
				  num_of_obstacles -= 1;
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	613b      	str	r3, [r7, #16]
				  prev_counter = counter;
 80014fe:	4b36      	ldr	r3, [pc, #216]	; (80015d8 <main+0x2b4>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	61bb      	str	r3, [r7, #24]
				  flagSecondFirst = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	63fb      	str	r3, [r7, #60]	; 0x3c
				  x1 += 1;
 8001508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800150a:	3301      	adds	r3, #1
 800150c:	62fb      	str	r3, [r7, #44]	; 0x2c
			  }
			  if (x2 < limit) {
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001512:	429a      	cmp	r2, r3
 8001514:	d20f      	bcs.n	8001536 <main+0x212>
				  x2 = x2 + 1;
 8001516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001518:	3301      	adds	r3, #1
 800151a:	62bb      	str	r3, [r7, #40]	; 0x28
				  flagRun = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	64bb      	str	r3, [r7, #72]	; 0x48
				  DrawObstacle(color1, x2 - 1);
 8001520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001522:	3b01      	subs	r3, #1
 8001524:	4619      	mov	r1, r3
 8001526:	6a38      	ldr	r0, [r7, #32]
 8001528:	f7ff f95e 	bl	80007e8 <DrawObstacle>
				  DrawObstacle(color2, x2);
 800152c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800152e:	69f8      	ldr	r0, [r7, #28]
 8001530:	f7ff f95a 	bl	80007e8 <DrawObstacle>
			  if (x2 < limit) {
 8001534:	e027      	b.n	8001586 <main+0x262>
			  } else if (x2 == limit) {
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800153a:	429a      	cmp	r2, r3
 800153c:	d123      	bne.n	8001586 <main+0x262>
				  DrawObstacle(color1, x2 - 1);
 800153e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001540:	3b01      	subs	r3, #1
 8001542:	4619      	mov	r1, r3
 8001544:	6a38      	ldr	r0, [r7, #32]
 8001546:	f7ff f94f 	bl	80007e8 <DrawObstacle>
				  DrawObstacle(color1, x2);
 800154a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800154c:	6a38      	ldr	r0, [r7, #32]
 800154e:	f7ff f94b 	bl	80007e8 <DrawObstacle>
				  num_of_obstacles -= 1;
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	3b01      	subs	r3, #1
 8001556:	613b      	str	r3, [r7, #16]
				  prev_counter = counter;
 8001558:	4b1f      	ldr	r3, [pc, #124]	; (80015d8 <main+0x2b4>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	61bb      	str	r3, [r7, #24]
				  flagSecondFirst = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	63fb      	str	r3, [r7, #60]	; 0x3c
				  x2 += 1;
 8001562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001564:	3301      	adds	r3, #1
 8001566:	62bb      	str	r3, [r7, #40]	; 0x28
			  if (x2 < limit) {
 8001568:	e00d      	b.n	8001586 <main+0x262>
			  }
		  }
		  else if (counter % speed == 0) flagRun = 1;
 800156a:	4b1b      	ldr	r3, [pc, #108]	; (80015d8 <main+0x2b4>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	fb93 f2f2 	sdiv	r2, r3, r2
 8001574:	68f9      	ldr	r1, [r7, #12]
 8001576:	fb01 f202 	mul.w	r2, r1, r2
 800157a:	1a9b      	subs	r3, r3, r2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d103      	bne.n	8001588 <main+0x264>
 8001580:	2301      	movs	r3, #1
 8001582:	64bb      	str	r3, [r7, #72]	; 0x48
 8001584:	e000      	b.n	8001588 <main+0x264>
			  if (x2 < limit) {
 8001586:	bf00      	nop
		  if ((counter % 1000 >= 500) && (y == 0) && (flagLegs == 1)) {
 8001588:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <main+0x2b4>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4b13      	ldr	r3, [pc, #76]	; (80015dc <main+0x2b8>)
 800158e:	fb83 1302 	smull	r1, r3, r3, r2
 8001592:	1199      	asrs	r1, r3, #6
 8001594:	17d3      	asrs	r3, r2, #31
 8001596:	1acb      	subs	r3, r1, r3
 8001598:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800159c:	fb01 f303 	mul.w	r3, r1, r3
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80015a6:	db1b      	blt.n	80015e0 <main+0x2bc>
 80015a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d118      	bne.n	80015e0 <main+0x2bc>
 80015ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d115      	bne.n	80015e0 <main+0x2bc>
			  flagLegs = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	647b      	str	r3, [r7, #68]	; 0x44
			  DrawLegsClear(color1);
 80015b8:	6a38      	ldr	r0, [r7, #32]
 80015ba:	f7ff f98f 	bl	80008dc <DrawLegsClear>
			  DrawLegsMainCharacter(color2, 1);
 80015be:	2101      	movs	r1, #1
 80015c0:	69f8      	ldr	r0, [r7, #28]
 80015c2:	f7ff f9bb 	bl	800093c <DrawLegsMainCharacter>
 80015c6:	e02a      	b.n	800161e <main+0x2fa>
 80015c8:	2000012c 	.word	0x2000012c
 80015cc:	20000028 	.word	0x20000028
 80015d0:	200000e0 	.word	0x200000e0
 80015d4:	40022000 	.word	0x40022000
 80015d8:	2003fd2c 	.word	0x2003fd2c
 80015dc:	10624dd3 	.word	0x10624dd3
		  }
		  else if ((counter % 1000 < 500) && (y == 0) && (flagLegs == 0)) {
 80015e0:	4b75      	ldr	r3, [pc, #468]	; (80017b8 <main+0x494>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	4b75      	ldr	r3, [pc, #468]	; (80017bc <main+0x498>)
 80015e6:	fb83 1302 	smull	r1, r3, r3, r2
 80015ea:	1199      	asrs	r1, r3, #6
 80015ec:	17d3      	asrs	r3, r2, #31
 80015ee:	1acb      	subs	r3, r1, r3
 80015f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80015f4:	fb01 f303 	mul.w	r3, r1, r3
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80015fe:	da0e      	bge.n	800161e <main+0x2fa>
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	2b00      	cmp	r3, #0
 8001604:	d10b      	bne.n	800161e <main+0x2fa>
 8001606:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001608:	2b00      	cmp	r3, #0
 800160a:	d108      	bne.n	800161e <main+0x2fa>
			  DrawLegsClear(color1);
 800160c:	6a38      	ldr	r0, [r7, #32]
 800160e:	f7ff f965 	bl	80008dc <DrawLegsClear>
			  DrawLegsMainCharacter(color2, 0);
 8001612:	2100      	movs	r1, #0
 8001614:	69f8      	ldr	r0, [r7, #28]
 8001616:	f7ff f991 	bl	800093c <DrawLegsMainCharacter>
			  flagLegs = 1;
 800161a:	2301      	movs	r3, #1
 800161c:	647b      	str	r3, [r7, #68]	; 0x44
		  }
		  if ((num_of_obstacles == 0) && (counter % 2000 == 1000 + tipaRand%1000)) {
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d125      	bne.n	8001670 <main+0x34c>
 8001624:	4b64      	ldr	r3, [pc, #400]	; (80017b8 <main+0x494>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4b64      	ldr	r3, [pc, #400]	; (80017bc <main+0x498>)
 800162a:	fb83 1302 	smull	r1, r3, r3, r2
 800162e:	11d9      	asrs	r1, r3, #7
 8001630:	17d3      	asrs	r3, r2, #31
 8001632:	1acb      	subs	r3, r1, r3
 8001634:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001638:	fb01 f303 	mul.w	r3, r1, r3
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001640:	4a5e      	ldr	r2, [pc, #376]	; (80017bc <main+0x498>)
 8001642:	fb82 0201 	smull	r0, r2, r2, r1
 8001646:	1190      	asrs	r0, r2, #6
 8001648:	17ca      	asrs	r2, r1, #31
 800164a:	1a82      	subs	r2, r0, r2
 800164c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001650:	fb00 f202 	mul.w	r2, r0, r2
 8001654:	1a8a      	subs	r2, r1, r2
 8001656:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 800165a:	4293      	cmp	r3, r2
 800165c:	d108      	bne.n	8001670 <main+0x34c>
			  x1 = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	62fb      	str	r3, [r7, #44]	; 0x2c
			  num_of_obstacles = 1;
 8001662:	2301      	movs	r3, #1
 8001664:	613b      	str	r3, [r7, #16]
			  prev_counter = counter;
 8001666:	4b54      	ldr	r3, [pc, #336]	; (80017b8 <main+0x494>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	61bb      	str	r3, [r7, #24]
			  flagSecondFirst = 1;
 800166c:	2301      	movs	r3, #1
 800166e:	63fb      	str	r3, [r7, #60]	; 0x3c
		  }
		  if (flagSecondFirst == 0) {
 8001670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001672:	2b00      	cmp	r3, #0
 8001674:	d10f      	bne.n	8001696 <main+0x372>
		  			  Step = 500 + tipaRand % 5000;
 8001676:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001678:	4b51      	ldr	r3, [pc, #324]	; (80017c0 <main+0x49c>)
 800167a:	fb83 1302 	smull	r1, r3, r3, r2
 800167e:	12d9      	asrs	r1, r3, #11
 8001680:	17d3      	asrs	r3, r2, #31
 8001682:	1acb      	subs	r3, r1, r3
 8001684:	f241 3188 	movw	r1, #5000	; 0x1388
 8001688:	fb01 f303 	mul.w	r3, r1, r3
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001692:	637b      	str	r3, [r7, #52]	; 0x34
 8001694:	e00e      	b.n	80016b4 <main+0x390>
		  }
		  else {
			  Step = 2000 + tipaRand % 5000;
 8001696:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001698:	4b49      	ldr	r3, [pc, #292]	; (80017c0 <main+0x49c>)
 800169a:	fb83 1302 	smull	r1, r3, r3, r2
 800169e:	12d9      	asrs	r1, r3, #11
 80016a0:	17d3      	asrs	r3, r2, #31
 80016a2:	1acb      	subs	r3, r1, r3
 80016a4:	f241 3188 	movw	r1, #5000	; 0x1388
 80016a8:	fb01 f303 	mul.w	r3, r1, r3
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80016b2:	637b      	str	r3, [r7, #52]	; 0x34
		  }
		  if ((num_of_obstacles == 1) && ((counter == prev_counter + Step)
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d129      	bne.n	800170e <main+0x3ea>
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016be:	441a      	add	r2, r3
 80016c0:	4b3d      	ldr	r3, [pc, #244]	; (80017b8 <main+0x494>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d010      	beq.n	80016ea <main+0x3c6>
				  || ((counter == Step - (max_counter - prev_counter)) && (prev_counter + Step >= max_counter)))) { // добавить генератор рандома
 80016c8:	f242 7210 	movw	r2, #10000	; 0x2710
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80016d2:	1ad2      	subs	r2, r2, r3
 80016d4:	4b38      	ldr	r3, [pc, #224]	; (80017b8 <main+0x494>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d118      	bne.n	800170e <main+0x3ea>
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016e0:	4413      	add	r3, r2
 80016e2:	f242 7210 	movw	r2, #10000	; 0x2710
 80016e6:	4293      	cmp	r3, r2
 80016e8:	db11      	blt.n	800170e <main+0x3ea>
			  if (x1 == limit + 1) {
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	1c5a      	adds	r2, r3, #1
 80016ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d103      	bne.n	80016fc <main+0x3d8>
				  x1 = 0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	62fb      	str	r3, [r7, #44]	; 0x2c
				  num_of_obstacles = 2;
 80016f8:	2302      	movs	r3, #2
 80016fa:	613b      	str	r3, [r7, #16]
			  }
			  if (x2 == limit + 1) {
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	1c5a      	adds	r2, r3, #1
 8001700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001702:	429a      	cmp	r2, r3
 8001704:	d103      	bne.n	800170e <main+0x3ea>
				  x2 = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	62bb      	str	r3, [r7, #40]	; 0x28
				  num_of_obstacles = 2;
 800170a:	2302      	movs	r3, #2
 800170c:	613b      	str	r3, [r7, #16]
			  }
		  }
		  if (counter == 0) {
 800170e:	4b2a      	ldr	r3, [pc, #168]	; (80017b8 <main+0x494>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d116      	bne.n	8001744 <main+0x420>
			  color = color1;
 8001716:	6a3b      	ldr	r3, [r7, #32]
 8001718:	603b      	str	r3, [r7, #0]
			  color1 = color2;
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	623b      	str	r3, [r7, #32]
			  color2 = color;
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	61fb      	str	r3, [r7, #28]
			  FillScreenDayOrNight(color1);
 8001722:	6a38      	ldr	r0, [r7, #32]
 8001724:	f7fe feee 	bl	8000504 <FillScreenDayOrNight>
			  DrawLine(color2);
 8001728:	69f8      	ldr	r0, [r7, #28]
 800172a:	f7fe ff11 	bl	8000550 <DrawLine>
			  DrawMainCharacter(color1, 40 - y);
 800172e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001730:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 8001734:	4619      	mov	r1, r3
 8001736:	6a38      	ldr	r0, [r7, #32]
 8001738:	f7fe ffc0 	bl	80006bc <DrawMainCharacter>
			  DrawMainCharacter(color2, y);
 800173c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800173e:	69f8      	ldr	r0, [r7, #28]
 8001740:	f7fe ffbc 	bl	80006bc <DrawMainCharacter>
		  }
		  if ((y == 0) && (((x1 >= 205) && (x1 < 260)) || ((x2 >= 205) && (x2 < 260)))) {
 8001744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001746:	2b00      	cmp	r3, #0
 8001748:	f47f ae46 	bne.w	80013d8 <main+0xb4>
 800174c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800174e:	2bcc      	cmp	r3, #204	; 0xcc
 8001750:	d903      	bls.n	800175a <main+0x436>
 8001752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001754:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001758:	d308      	bcc.n	800176c <main+0x448>
 800175a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800175c:	2bcc      	cmp	r3, #204	; 0xcc
 800175e:	f67f ae3b 	bls.w	80013d8 <main+0xb4>
 8001762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001764:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001768:	f4bf ae36 	bcs.w	80013d8 <main+0xb4>
		  	  GameOn = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001770:	e632      	b.n	80013d8 <main+0xb4>
		  }
	  }
	  else if (GameOn == 0) {
 8001772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001774:	2b00      	cmp	r3, #0
 8001776:	f47f ae2f 	bne.w	80013d8 <main+0xb4>
		  DrawLine(color2);
 800177a:	69f8      	ldr	r0, [r7, #28]
 800177c:	f7fe fee8 	bl	8000550 <DrawLine>
		  DrawGameOver(color2);
 8001780:	69f8      	ldr	r0, [r7, #28]
 8001782:	f7fe ff1d 	bl	80005c0 <DrawGameOver>
		  DrawMainCharacter(color2, 0);
 8001786:	2100      	movs	r1, #0
 8001788:	69f8      	ldr	r0, [r7, #28]
 800178a:	f7fe ff97 	bl	80006bc <DrawMainCharacter>
		  if ((x1 >= 0) && (x1 <= limit)) {
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001792:	429a      	cmp	r2, r3
 8001794:	d803      	bhi.n	800179e <main+0x47a>
			DrawObstacle(color2, x1);
 8001796:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001798:	69f8      	ldr	r0, [r7, #28]
 800179a:	f7ff f825 	bl	80007e8 <DrawObstacle>
		  }
		  if ((x2 >= 0) && (x2 <= limit)) {
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d803      	bhi.n	80017ae <main+0x48a>
			DrawObstacle(color2, x2);
 80017a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017a8:	69f8      	ldr	r0, [r7, #28]
 80017aa:	f7ff f81d 	bl	80007e8 <DrawObstacle>
		  }
		  GameOn = -1;
 80017ae:	f04f 33ff 	mov.w	r3, #4294967295
 80017b2:	63bb      	str	r3, [r7, #56]	; 0x38
	  if (GameOn == 1) {
 80017b4:	e610      	b.n	80013d8 <main+0xb4>
 80017b6:	bf00      	nop
 80017b8:	2003fd2c 	.word	0x2003fd2c
 80017bc:	10624dd3 	.word	0x10624dd3
 80017c0:	68db8bad 	.word	0x68db8bad

080017c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b094      	sub	sp, #80	; 0x50
 80017c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ca:	f107 0320 	add.w	r3, r7, #32
 80017ce:	2230      	movs	r2, #48	; 0x30
 80017d0:	2100      	movs	r1, #0
 80017d2:	4618      	mov	r0, r3
 80017d4:	f002 ffac 	bl	8004730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017d8:	f107 030c 	add.w	r3, r7, #12
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
 80017e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017e8:	4b2b      	ldr	r3, [pc, #172]	; (8001898 <SystemClock_Config+0xd4>)
 80017ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ec:	4a2a      	ldr	r2, [pc, #168]	; (8001898 <SystemClock_Config+0xd4>)
 80017ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f2:	6413      	str	r3, [r2, #64]	; 0x40
 80017f4:	4b28      	ldr	r3, [pc, #160]	; (8001898 <SystemClock_Config+0xd4>)
 80017f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001800:	4b26      	ldr	r3, [pc, #152]	; (800189c <SystemClock_Config+0xd8>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a25      	ldr	r2, [pc, #148]	; (800189c <SystemClock_Config+0xd8>)
 8001806:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800180a:	6013      	str	r3, [r2, #0]
 800180c:	4b23      	ldr	r3, [pc, #140]	; (800189c <SystemClock_Config+0xd8>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001814:	607b      	str	r3, [r7, #4]
 8001816:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001818:	2301      	movs	r3, #1
 800181a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800181c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001822:	2302      	movs	r3, #2
 8001824:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001826:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800182a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800182c:	2319      	movs	r3, #25
 800182e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001830:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001834:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001836:	2302      	movs	r3, #2
 8001838:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800183a:	2308      	movs	r3, #8
 800183c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800183e:	f107 0320 	add.w	r3, r7, #32
 8001842:	4618      	mov	r0, r3
 8001844:	f001 fa3c 	bl	8002cc0 <HAL_RCC_OscConfig>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800184e:	f000 f9f1 	bl	8001c34 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001852:	f001 f9e5 	bl	8002c20 <HAL_PWREx_EnableOverDrive>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800185c:	f000 f9ea 	bl	8001c34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001860:	230f      	movs	r3, #15
 8001862:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001864:	2302      	movs	r3, #2
 8001866:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800186c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001870:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001872:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001876:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001878:	f107 030c 	add.w	r3, r7, #12
 800187c:	2106      	movs	r1, #6
 800187e:	4618      	mov	r0, r3
 8001880:	f001 fcc2 	bl	8003208 <HAL_RCC_ClockConfig>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800188a:	f000 f9d3 	bl	8001c34 <Error_Handler>
  }
}
 800188e:	bf00      	nop
 8001890:	3750      	adds	r7, #80	; 0x50
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40023800 	.word	0x40023800
 800189c:	40007000 	.word	0x40007000

080018a0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b0a2      	sub	sp, #136	; 0x88
 80018a4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018a6:	1d3b      	adds	r3, r7, #4
 80018a8:	2284      	movs	r2, #132	; 0x84
 80018aa:	2100      	movs	r1, #0
 80018ac:	4618      	mov	r0, r3
 80018ae:	f002 ff3f 	bl	8004730 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_CLK48;
 80018b2:	4b10      	ldr	r3, [pc, #64]	; (80018f4 <PeriphCommonClock_Config+0x54>)
 80018b4:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80018b6:	23c0      	movs	r3, #192	; 0xc0
 80018b8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80018ba:	2302      	movs	r3, #2
 80018bc:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80018be:	2302      	movs	r3, #2
 80018c0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 80018c2:	2301      	movs	r3, #1
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80018c6:	2301      	movs	r3, #1
 80018c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80018ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018ce:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80018d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80018d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018d8:	1d3b      	adds	r3, r7, #4
 80018da:	4618      	mov	r0, r3
 80018dc:	f001 fe46 	bl	800356c <HAL_RCCEx_PeriphCLKConfig>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <PeriphCommonClock_Config+0x4a>
  {
    Error_Handler();
 80018e6:	f000 f9a5 	bl	8001c34 <Error_Handler>
  }
}
 80018ea:	bf00      	nop
 80018ec:	3788      	adds	r7, #136	; 0x88
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	00200008 	.word	0x00200008

080018f8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08e      	sub	sp, #56	; 0x38
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80018fe:	1d3b      	adds	r3, r7, #4
 8001900:	2234      	movs	r2, #52	; 0x34
 8001902:	2100      	movs	r1, #0
 8001904:	4618      	mov	r0, r3
 8001906:	f002 ff13 	bl	8004730 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800190a:	4b3a      	ldr	r3, [pc, #232]	; (80019f4 <MX_LTDC_Init+0xfc>)
 800190c:	4a3a      	ldr	r2, [pc, #232]	; (80019f8 <MX_LTDC_Init+0x100>)
 800190e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001910:	4b38      	ldr	r3, [pc, #224]	; (80019f4 <MX_LTDC_Init+0xfc>)
 8001912:	2200      	movs	r2, #0
 8001914:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001916:	4b37      	ldr	r3, [pc, #220]	; (80019f4 <MX_LTDC_Init+0xfc>)
 8001918:	2200      	movs	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800191c:	4b35      	ldr	r3, [pc, #212]	; (80019f4 <MX_LTDC_Init+0xfc>)
 800191e:	2200      	movs	r2, #0
 8001920:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001922:	4b34      	ldr	r3, [pc, #208]	; (80019f4 <MX_LTDC_Init+0xfc>)
 8001924:	2200      	movs	r2, #0
 8001926:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001928:	4b32      	ldr	r3, [pc, #200]	; (80019f4 <MX_LTDC_Init+0xfc>)
 800192a:	2228      	movs	r2, #40	; 0x28
 800192c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800192e:	4b31      	ldr	r3, [pc, #196]	; (80019f4 <MX_LTDC_Init+0xfc>)
 8001930:	2209      	movs	r2, #9
 8001932:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001934:	4b2f      	ldr	r3, [pc, #188]	; (80019f4 <MX_LTDC_Init+0xfc>)
 8001936:	2235      	movs	r2, #53	; 0x35
 8001938:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800193a:	4b2e      	ldr	r3, [pc, #184]	; (80019f4 <MX_LTDC_Init+0xfc>)
 800193c:	220b      	movs	r2, #11
 800193e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001940:	4b2c      	ldr	r3, [pc, #176]	; (80019f4 <MX_LTDC_Init+0xfc>)
 8001942:	f240 2215 	movw	r2, #533	; 0x215
 8001946:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001948:	4b2a      	ldr	r3, [pc, #168]	; (80019f4 <MX_LTDC_Init+0xfc>)
 800194a:	f240 121b 	movw	r2, #283	; 0x11b
 800194e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8001950:	4b28      	ldr	r3, [pc, #160]	; (80019f4 <MX_LTDC_Init+0xfc>)
 8001952:	f240 2235 	movw	r2, #565	; 0x235
 8001956:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001958:	4b26      	ldr	r3, [pc, #152]	; (80019f4 <MX_LTDC_Init+0xfc>)
 800195a:	f240 121d 	movw	r2, #285	; 0x11d
 800195e:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001960:	4b24      	ldr	r3, [pc, #144]	; (80019f4 <MX_LTDC_Init+0xfc>)
 8001962:	2200      	movs	r2, #0
 8001964:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001968:	4b22      	ldr	r3, [pc, #136]	; (80019f4 <MX_LTDC_Init+0xfc>)
 800196a:	2200      	movs	r2, #0
 800196c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001970:	4b20      	ldr	r3, [pc, #128]	; (80019f4 <MX_LTDC_Init+0xfc>)
 8001972:	2200      	movs	r2, #0
 8001974:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001978:	481e      	ldr	r0, [pc, #120]	; (80019f4 <MX_LTDC_Init+0xfc>)
 800197a:	f000 fe73 	bl	8002664 <HAL_LTDC_Init>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001984:	f000 f956 	bl	8001c34 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001988:	2300      	movs	r3, #0
 800198a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 800198c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001990:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8001996:	f44f 7388 	mov.w	r3, #272	; 0x110
 800199a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800199c:	2302      	movs	r3, #2
 800199e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80019a0:	23ff      	movs	r3, #255	; 0xff
 80019a2:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80019a4:	2300      	movs	r3, #0
 80019a6:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80019a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019ac:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80019ae:	2305      	movs	r3, #5
 80019b0:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80019b6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80019ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80019bc:	f44f 7388 	mov.w	r3, #272	; 0x110
 80019c0:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80019ce:	2300      	movs	r3, #0
 80019d0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80019d4:	1d3b      	adds	r3, r7, #4
 80019d6:	2200      	movs	r2, #0
 80019d8:	4619      	mov	r1, r3
 80019da:	4806      	ldr	r0, [pc, #24]	; (80019f4 <MX_LTDC_Init+0xfc>)
 80019dc:	f000 ff12 	bl	8002804 <HAL_LTDC_ConfigLayer>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_LTDC_Init+0xf2>
  {
    Error_Handler();
 80019e6:	f000 f925 	bl	8001c34 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80019ea:	bf00      	nop
 80019ec:	3738      	adds	r7, #56	; 0x38
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000028 	.word	0x20000028
 80019f8:	40016800 	.word	0x40016800

080019fc <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001a00:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <MX_RNG_Init+0x20>)
 8001a02:	4a07      	ldr	r2, [pc, #28]	; (8001a20 <MX_RNG_Init+0x24>)
 8001a04:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001a06:	4805      	ldr	r0, [pc, #20]	; (8001a1c <MX_RNG_Init+0x20>)
 8001a08:	f002 f9a0 	bl	8003d4c <HAL_RNG_Init>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001a12:	f000 f90f 	bl	8001c34 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	200000d0 	.word	0x200000d0
 8001a20:	50060800 	.word	0x50060800

08001a24 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b088      	sub	sp, #32
 8001a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a2a:	f107 0310 	add.w	r3, r7, #16
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	609a      	str	r2, [r3, #8]
 8001a36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a38:	1d3b      	adds	r3, r7, #4
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]
 8001a40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a42:	4b1d      	ldr	r3, [pc, #116]	; (8001ab8 <MX_TIM3_Init+0x94>)
 8001a44:	4a1d      	ldr	r2, [pc, #116]	; (8001abc <MX_TIM3_Init+0x98>)
 8001a46:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8001a48:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <MX_TIM3_Init+0x94>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a4e:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <MX_TIM3_Init+0x94>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000;
 8001a54:	4b18      	ldr	r3, [pc, #96]	; (8001ab8 <MX_TIM3_Init+0x94>)
 8001a56:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001a5a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a5c:	4b16      	ldr	r3, [pc, #88]	; (8001ab8 <MX_TIM3_Init+0x94>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a62:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <MX_TIM3_Init+0x94>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a68:	4813      	ldr	r0, [pc, #76]	; (8001ab8 <MX_TIM3_Init+0x94>)
 8001a6a:	f002 f999 	bl	8003da0 <HAL_TIM_Base_Init>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001a74:	f000 f8de 	bl	8001c34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a7c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a7e:	f107 0310 	add.w	r3, r7, #16
 8001a82:	4619      	mov	r1, r3
 8001a84:	480c      	ldr	r0, [pc, #48]	; (8001ab8 <MX_TIM3_Init+0x94>)
 8001a86:	f002 fb7b 	bl	8004180 <HAL_TIM_ConfigClockSource>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001a90:	f000 f8d0 	bl	8001c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a94:	2300      	movs	r3, #0
 8001a96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a9c:	1d3b      	adds	r3, r7, #4
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4805      	ldr	r0, [pc, #20]	; (8001ab8 <MX_TIM3_Init+0x94>)
 8001aa2:	f002 fd99 	bl	80045d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001aac:	f000 f8c2 	bl	8001c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ab0:	bf00      	nop
 8001ab2:	3720      	adds	r7, #32
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	200000e0 	.word	0x200000e0
 8001abc:	40000400 	.word	0x40000400

08001ac0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08c      	sub	sp, #48	; 0x30
 8001ac4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac6:	f107 031c 	add.w	r3, r7, #28
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]
 8001ad2:	60da      	str	r2, [r3, #12]
 8001ad4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ad6:	4b54      	ldr	r3, [pc, #336]	; (8001c28 <MX_GPIO_Init+0x168>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	4a53      	ldr	r2, [pc, #332]	; (8001c28 <MX_GPIO_Init+0x168>)
 8001adc:	f043 0310 	orr.w	r3, r3, #16
 8001ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae2:	4b51      	ldr	r3, [pc, #324]	; (8001c28 <MX_GPIO_Init+0x168>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	f003 0310 	and.w	r3, r3, #16
 8001aea:	61bb      	str	r3, [r7, #24]
 8001aec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aee:	4b4e      	ldr	r3, [pc, #312]	; (8001c28 <MX_GPIO_Init+0x168>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	4a4d      	ldr	r2, [pc, #308]	; (8001c28 <MX_GPIO_Init+0x168>)
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	6313      	str	r3, [r2, #48]	; 0x30
 8001afa:	4b4b      	ldr	r3, [pc, #300]	; (8001c28 <MX_GPIO_Init+0x168>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	617b      	str	r3, [r7, #20]
 8001b04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001b06:	4b48      	ldr	r3, [pc, #288]	; (8001c28 <MX_GPIO_Init+0x168>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	4a47      	ldr	r2, [pc, #284]	; (8001c28 <MX_GPIO_Init+0x168>)
 8001b0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b10:	6313      	str	r3, [r2, #48]	; 0x30
 8001b12:	4b45      	ldr	r3, [pc, #276]	; (8001c28 <MX_GPIO_Init+0x168>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b1a:	613b      	str	r3, [r7, #16]
 8001b1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001b1e:	4b42      	ldr	r3, [pc, #264]	; (8001c28 <MX_GPIO_Init+0x168>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	4a41      	ldr	r2, [pc, #260]	; (8001c28 <MX_GPIO_Init+0x168>)
 8001b24:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b28:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2a:	4b3f      	ldr	r3, [pc, #252]	; (8001c28 <MX_GPIO_Init+0x168>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b36:	4b3c      	ldr	r3, [pc, #240]	; (8001c28 <MX_GPIO_Init+0x168>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	4a3b      	ldr	r2, [pc, #236]	; (8001c28 <MX_GPIO_Init+0x168>)
 8001b3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b40:	6313      	str	r3, [r2, #48]	; 0x30
 8001b42:	4b39      	ldr	r3, [pc, #228]	; (8001c28 <MX_GPIO_Init+0x168>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b4a:	60bb      	str	r3, [r7, #8]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001b4e:	4b36      	ldr	r3, [pc, #216]	; (8001c28 <MX_GPIO_Init+0x168>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	4a35      	ldr	r2, [pc, #212]	; (8001c28 <MX_GPIO_Init+0x168>)
 8001b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b58:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5a:	4b33      	ldr	r3, [pc, #204]	; (8001c28 <MX_GPIO_Init+0x168>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b62:	607b      	str	r3, [r7, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b66:	4b30      	ldr	r3, [pc, #192]	; (8001c28 <MX_GPIO_Init+0x168>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	4a2f      	ldr	r2, [pc, #188]	; (8001c28 <MX_GPIO_Init+0x168>)
 8001b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b70:	6313      	str	r3, [r2, #48]	; 0x30
 8001b72:	4b2d      	ldr	r3, [pc, #180]	; (8001c28 <MX_GPIO_Init+0x168>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b7a:	603b      	str	r3, [r7, #0]
 8001b7c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 8001b7e:	2201      	movs	r2, #1
 8001b80:	2108      	movs	r1, #8
 8001b82:	482a      	ldr	r0, [pc, #168]	; (8001c2c <MX_GPIO_Init+0x16c>)
 8001b84:	f000 fd30 	bl	80025e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	2102      	movs	r1, #2
 8001b8c:	4828      	ldr	r0, [pc, #160]	; (8001c30 <MX_GPIO_Init+0x170>)
 8001b8e:	f000 fd2b 	bl	80025e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_SET);
 8001b92:	2201      	movs	r2, #1
 8001b94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b98:	4825      	ldr	r0, [pc, #148]	; (8001c30 <MX_GPIO_Init+0x170>)
 8001b9a:	f000 fd25 	bl	80025e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PK3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b9e:	2308      	movs	r3, #8
 8001ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001baa:	2302      	movs	r3, #2
 8001bac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001bae:	f107 031c 	add.w	r3, r7, #28
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	481d      	ldr	r0, [pc, #116]	; (8001c2c <MX_GPIO_Init+0x16c>)
 8001bb6:	f000 fb53 	bl	8002260 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001bca:	f107 031c 	add.w	r3, r7, #28
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4817      	ldr	r0, [pc, #92]	; (8001c30 <MX_GPIO_Init+0x170>)
 8001bd2:	f000 fb45 	bl	8002260 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001bd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001be4:	2302      	movs	r3, #2
 8001be6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001be8:	f107 031c 	add.w	r3, r7, #28
 8001bec:	4619      	mov	r1, r3
 8001bee:	4810      	ldr	r0, [pc, #64]	; (8001c30 <MX_GPIO_Init+0x170>)
 8001bf0:	f000 fb36 	bl	8002260 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001bf4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001bf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bfa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001bfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001c04:	f107 031c 	add.w	r3, r7, #28
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4809      	ldr	r0, [pc, #36]	; (8001c30 <MX_GPIO_Init+0x170>)
 8001c0c:	f000 fb28 	bl	8002260 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001c10:	2200      	movs	r2, #0
 8001c12:	2100      	movs	r1, #0
 8001c14:	2028      	movs	r0, #40	; 0x28
 8001c16:	f000 faec 	bl	80021f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c1a:	2028      	movs	r0, #40	; 0x28
 8001c1c:	f000 fb05 	bl	800222a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c20:	bf00      	nop
 8001c22:	3730      	adds	r7, #48	; 0x30
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	40022800 	.word	0x40022800
 8001c30:	40022000 	.word	0x40022000

08001c34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001c38:	b672      	cpsid	i
}
 8001c3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c3c:	e7fe      	b.n	8001c3c <Error_Handler+0x8>
	...

08001c40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c46:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <HAL_MspInit+0x44>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	4a0e      	ldr	r2, [pc, #56]	; (8001c84 <HAL_MspInit+0x44>)
 8001c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c50:	6413      	str	r3, [r2, #64]	; 0x40
 8001c52:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <HAL_MspInit+0x44>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5a:	607b      	str	r3, [r7, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c5e:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <HAL_MspInit+0x44>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c62:	4a08      	ldr	r2, [pc, #32]	; (8001c84 <HAL_MspInit+0x44>)
 8001c64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c68:	6453      	str	r3, [r2, #68]	; 0x44
 8001c6a:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <HAL_MspInit+0x44>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c72:	603b      	str	r3, [r7, #0]
 8001c74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	40023800 	.word	0x40023800

08001c88 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08e      	sub	sp, #56	; 0x38
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	60da      	str	r2, [r3, #12]
 8001c9e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a51      	ldr	r2, [pc, #324]	; (8001dec <HAL_LTDC_MspInit+0x164>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	f040 809b 	bne.w	8001de2 <HAL_LTDC_MspInit+0x15a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001cac:	4b50      	ldr	r3, [pc, #320]	; (8001df0 <HAL_LTDC_MspInit+0x168>)
 8001cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb0:	4a4f      	ldr	r2, [pc, #316]	; (8001df0 <HAL_LTDC_MspInit+0x168>)
 8001cb2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001cb6:	6453      	str	r3, [r2, #68]	; 0x44
 8001cb8:	4b4d      	ldr	r3, [pc, #308]	; (8001df0 <HAL_LTDC_MspInit+0x168>)
 8001cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cc0:	623b      	str	r3, [r7, #32]
 8001cc2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cc4:	4b4a      	ldr	r3, [pc, #296]	; (8001df0 <HAL_LTDC_MspInit+0x168>)
 8001cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc8:	4a49      	ldr	r2, [pc, #292]	; (8001df0 <HAL_LTDC_MspInit+0x168>)
 8001cca:	f043 0310 	orr.w	r3, r3, #16
 8001cce:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd0:	4b47      	ldr	r3, [pc, #284]	; (8001df0 <HAL_LTDC_MspInit+0x168>)
 8001cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd4:	f003 0310 	and.w	r3, r3, #16
 8001cd8:	61fb      	str	r3, [r7, #28]
 8001cda:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001cdc:	4b44      	ldr	r3, [pc, #272]	; (8001df0 <HAL_LTDC_MspInit+0x168>)
 8001cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce0:	4a43      	ldr	r2, [pc, #268]	; (8001df0 <HAL_LTDC_MspInit+0x168>)
 8001ce2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ce6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce8:	4b41      	ldr	r3, [pc, #260]	; (8001df0 <HAL_LTDC_MspInit+0x168>)
 8001cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cf0:	61bb      	str	r3, [r7, #24]
 8001cf2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001cf4:	4b3e      	ldr	r3, [pc, #248]	; (8001df0 <HAL_LTDC_MspInit+0x168>)
 8001cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf8:	4a3d      	ldr	r2, [pc, #244]	; (8001df0 <HAL_LTDC_MspInit+0x168>)
 8001cfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cfe:	6313      	str	r3, [r2, #48]	; 0x30
 8001d00:	4b3b      	ldr	r3, [pc, #236]	; (8001df0 <HAL_LTDC_MspInit+0x168>)
 8001d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d08:	617b      	str	r3, [r7, #20]
 8001d0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d0c:	4b38      	ldr	r3, [pc, #224]	; (8001df0 <HAL_LTDC_MspInit+0x168>)
 8001d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d10:	4a37      	ldr	r2, [pc, #220]	; (8001df0 <HAL_LTDC_MspInit+0x168>)
 8001d12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d16:	6313      	str	r3, [r2, #48]	; 0x30
 8001d18:	4b35      	ldr	r3, [pc, #212]	; (8001df0 <HAL_LTDC_MspInit+0x168>)
 8001d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d20:	613b      	str	r3, [r7, #16]
 8001d22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001d24:	4b32      	ldr	r3, [pc, #200]	; (8001df0 <HAL_LTDC_MspInit+0x168>)
 8001d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d28:	4a31      	ldr	r2, [pc, #196]	; (8001df0 <HAL_LTDC_MspInit+0x168>)
 8001d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d2e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d30:	4b2f      	ldr	r3, [pc, #188]	; (8001df0 <HAL_LTDC_MspInit+0x168>)
 8001d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d3c:	2310      	movs	r3, #16
 8001d3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d40:	2302      	movs	r3, #2
 8001d42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d4c:	230e      	movs	r3, #14
 8001d4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d54:	4619      	mov	r1, r3
 8001d56:	4827      	ldr	r0, [pc, #156]	; (8001df4 <HAL_LTDC_MspInit+0x16c>)
 8001d58:	f000 fa82 	bl	8002260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_11
 8001d5c:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7|GPIO_PIN_9
                          |GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_3
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d62:	2302      	movs	r3, #2
 8001d64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d66:	2300      	movs	r3, #0
 8001d68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d6e:	230e      	movs	r3, #14
 8001d70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001d72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d76:	4619      	mov	r1, r3
 8001d78:	481f      	ldr	r0, [pc, #124]	; (8001df8 <HAL_LTDC_MspInit+0x170>)
 8001d7a:	f000 fa71 	bl	8002260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 8001d7e:	23f7      	movs	r3, #247	; 0xf7
 8001d80:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d82:	2302      	movs	r3, #2
 8001d84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d8e:	230e      	movs	r3, #14
 8001d90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001d92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d96:	4619      	mov	r1, r3
 8001d98:	4818      	ldr	r0, [pc, #96]	; (8001dfc <HAL_LTDC_MspInit+0x174>)
 8001d9a:	f000 fa61 	bl	8002260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001d9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001da2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da4:	2302      	movs	r3, #2
 8001da6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dac:	2302      	movs	r3, #2
 8001dae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001db0:	2309      	movs	r3, #9
 8001db2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001db4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001db8:	4619      	mov	r1, r3
 8001dba:	4811      	ldr	r0, [pc, #68]	; (8001e00 <HAL_LTDC_MspInit+0x178>)
 8001dbc:	f000 fa50 	bl	8002260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_14;
 8001dc0:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8001dc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001dd2:	230e      	movs	r3, #14
 8001dd4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001dd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4809      	ldr	r0, [pc, #36]	; (8001e04 <HAL_LTDC_MspInit+0x17c>)
 8001dde:	f000 fa3f 	bl	8002260 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001de2:	bf00      	nop
 8001de4:	3738      	adds	r7, #56	; 0x38
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40016800 	.word	0x40016800
 8001df0:	40023800 	.word	0x40023800
 8001df4:	40021000 	.word	0x40021000
 8001df8:	40022400 	.word	0x40022400
 8001dfc:	40022800 	.word	0x40022800
 8001e00:	40021800 	.word	0x40021800
 8001e04:	40022000 	.word	0x40022000

08001e08 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a0a      	ldr	r2, [pc, #40]	; (8001e40 <HAL_RNG_MspInit+0x38>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d10b      	bne.n	8001e32 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001e1a:	4b0a      	ldr	r3, [pc, #40]	; (8001e44 <HAL_RNG_MspInit+0x3c>)
 8001e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e1e:	4a09      	ldr	r2, [pc, #36]	; (8001e44 <HAL_RNG_MspInit+0x3c>)
 8001e20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e24:	6353      	str	r3, [r2, #52]	; 0x34
 8001e26:	4b07      	ldr	r3, [pc, #28]	; (8001e44 <HAL_RNG_MspInit+0x3c>)
 8001e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001e32:	bf00      	nop
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	50060800 	.word	0x50060800
 8001e44:	40023800 	.word	0x40023800

08001e48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a0d      	ldr	r2, [pc, #52]	; (8001e8c <HAL_TIM_Base_MspInit+0x44>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d113      	bne.n	8001e82 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e5a:	4b0d      	ldr	r3, [pc, #52]	; (8001e90 <HAL_TIM_Base_MspInit+0x48>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	4a0c      	ldr	r2, [pc, #48]	; (8001e90 <HAL_TIM_Base_MspInit+0x48>)
 8001e60:	f043 0302 	orr.w	r3, r3, #2
 8001e64:	6413      	str	r3, [r2, #64]	; 0x40
 8001e66:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <HAL_TIM_Base_MspInit+0x48>)
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001e72:	2200      	movs	r2, #0
 8001e74:	2100      	movs	r1, #0
 8001e76:	201d      	movs	r0, #29
 8001e78:	f000 f9bb 	bl	80021f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e7c:	201d      	movs	r0, #29
 8001e7e:	f000 f9d4 	bl	800222a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e82:	bf00      	nop
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40000400 	.word	0x40000400
 8001e90:	40023800 	.word	0x40023800

08001e94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e98:	e7fe      	b.n	8001e98 <NMI_Handler+0x4>

08001e9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e9e:	e7fe      	b.n	8001e9e <HardFault_Handler+0x4>

08001ea0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ea4:	e7fe      	b.n	8001ea4 <MemManage_Handler+0x4>

08001ea6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eaa:	e7fe      	b.n	8001eaa <BusFault_Handler+0x4>

08001eac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eb0:	e7fe      	b.n	8001eb0 <UsageFault_Handler+0x4>

08001eb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ee0:	f000 f88c 	bl	8001ffc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ee4:	bf00      	nop
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001eec:	4802      	ldr	r0, [pc, #8]	; (8001ef8 <TIM3_IRQHandler+0x10>)
 8001eee:	f002 f827 	bl	8003f40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	200000e0 	.word	0x200000e0

08001efc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001f00:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001f04:	f000 fb8a 	bl	800261c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f08:	bf00      	nop
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f10:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <SystemInit+0x20>)
 8001f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f16:	4a05      	ldr	r2, [pc, #20]	; (8001f2c <SystemInit+0x20>)
 8001f18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f34:	480d      	ldr	r0, [pc, #52]	; (8001f6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f36:	490e      	ldr	r1, [pc, #56]	; (8001f70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f38:	4a0e      	ldr	r2, [pc, #56]	; (8001f74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f3c:	e002      	b.n	8001f44 <LoopCopyDataInit>

08001f3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f42:	3304      	adds	r3, #4

08001f44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f48:	d3f9      	bcc.n	8001f3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f4a:	4a0b      	ldr	r2, [pc, #44]	; (8001f78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f4c:	4c0b      	ldr	r4, [pc, #44]	; (8001f7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f50:	e001      	b.n	8001f56 <LoopFillZerobss>

08001f52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f54:	3204      	adds	r2, #4

08001f56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f58:	d3fb      	bcc.n	8001f52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f5a:	f7ff ffd7 	bl	8001f0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f5e:	f002 fbef 	bl	8004740 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f62:	f7ff f9df 	bl	8001324 <main>
  bx  lr    
 8001f66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f68:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001f6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f70:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001f74:	0800fb8c 	.word	0x0800fb8c
  ldr r2, =_sbss
 8001f78:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001f7c:	2003fd34 	.word	0x2003fd34

08001f80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f80:	e7fe      	b.n	8001f80 <ADC_IRQHandler>

08001f82 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f86:	2003      	movs	r0, #3
 8001f88:	f000 f928 	bl	80021dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f8c:	200f      	movs	r0, #15
 8001f8e:	f000 f805 	bl	8001f9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f92:	f7ff fe55 	bl	8001c40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fa4:	4b12      	ldr	r3, [pc, #72]	; (8001ff0 <HAL_InitTick+0x54>)
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <HAL_InitTick+0x58>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	4619      	mov	r1, r3
 8001fae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f000 f943 	bl	8002246 <HAL_SYSTICK_Config>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e00e      	b.n	8001fe8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b0f      	cmp	r3, #15
 8001fce:	d80a      	bhi.n	8001fe6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd8:	f000 f90b 	bl	80021f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fdc:	4a06      	ldr	r2, [pc, #24]	; (8001ff8 <HAL_InitTick+0x5c>)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	e000      	b.n	8001fe8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	20000000 	.word	0x20000000
 8001ff4:	20000008 	.word	0x20000008
 8001ff8:	20000004 	.word	0x20000004

08001ffc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002000:	4b06      	ldr	r3, [pc, #24]	; (800201c <HAL_IncTick+0x20>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	461a      	mov	r2, r3
 8002006:	4b06      	ldr	r3, [pc, #24]	; (8002020 <HAL_IncTick+0x24>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4413      	add	r3, r2
 800200c:	4a04      	ldr	r2, [pc, #16]	; (8002020 <HAL_IncTick+0x24>)
 800200e:	6013      	str	r3, [r2, #0]
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	20000008 	.word	0x20000008
 8002020:	2003fd30 	.word	0x2003fd30

08002024 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  return uwTick;
 8002028:	4b03      	ldr	r3, [pc, #12]	; (8002038 <HAL_GetTick+0x14>)
 800202a:	681b      	ldr	r3, [r3, #0]
}
 800202c:	4618      	mov	r0, r3
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	2003fd30 	.word	0x2003fd30

0800203c <__NVIC_SetPriorityGrouping>:
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800204c:	4b0b      	ldr	r3, [pc, #44]	; (800207c <__NVIC_SetPriorityGrouping+0x40>)
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002052:	68ba      	ldr	r2, [r7, #8]
 8002054:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002058:	4013      	ands	r3, r2
 800205a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002064:	4b06      	ldr	r3, [pc, #24]	; (8002080 <__NVIC_SetPriorityGrouping+0x44>)
 8002066:	4313      	orrs	r3, r2
 8002068:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800206a:	4a04      	ldr	r2, [pc, #16]	; (800207c <__NVIC_SetPriorityGrouping+0x40>)
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	60d3      	str	r3, [r2, #12]
}
 8002070:	bf00      	nop
 8002072:	3714      	adds	r7, #20
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	e000ed00 	.word	0xe000ed00
 8002080:	05fa0000 	.word	0x05fa0000

08002084 <__NVIC_GetPriorityGrouping>:
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002088:	4b04      	ldr	r3, [pc, #16]	; (800209c <__NVIC_GetPriorityGrouping+0x18>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	0a1b      	lsrs	r3, r3, #8
 800208e:	f003 0307 	and.w	r3, r3, #7
}
 8002092:	4618      	mov	r0, r3
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	e000ed00 	.word	0xe000ed00

080020a0 <__NVIC_EnableIRQ>:
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	db0b      	blt.n	80020ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020b2:	79fb      	ldrb	r3, [r7, #7]
 80020b4:	f003 021f 	and.w	r2, r3, #31
 80020b8:	4907      	ldr	r1, [pc, #28]	; (80020d8 <__NVIC_EnableIRQ+0x38>)
 80020ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020be:	095b      	lsrs	r3, r3, #5
 80020c0:	2001      	movs	r0, #1
 80020c2:	fa00 f202 	lsl.w	r2, r0, r2
 80020c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	e000e100 	.word	0xe000e100

080020dc <__NVIC_SetPriority>:
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	6039      	str	r1, [r7, #0]
 80020e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	db0a      	blt.n	8002106 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	b2da      	uxtb	r2, r3
 80020f4:	490c      	ldr	r1, [pc, #48]	; (8002128 <__NVIC_SetPriority+0x4c>)
 80020f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fa:	0112      	lsls	r2, r2, #4
 80020fc:	b2d2      	uxtb	r2, r2
 80020fe:	440b      	add	r3, r1
 8002100:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002104:	e00a      	b.n	800211c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	b2da      	uxtb	r2, r3
 800210a:	4908      	ldr	r1, [pc, #32]	; (800212c <__NVIC_SetPriority+0x50>)
 800210c:	79fb      	ldrb	r3, [r7, #7]
 800210e:	f003 030f 	and.w	r3, r3, #15
 8002112:	3b04      	subs	r3, #4
 8002114:	0112      	lsls	r2, r2, #4
 8002116:	b2d2      	uxtb	r2, r2
 8002118:	440b      	add	r3, r1
 800211a:	761a      	strb	r2, [r3, #24]
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	e000e100 	.word	0xe000e100
 800212c:	e000ed00 	.word	0xe000ed00

08002130 <NVIC_EncodePriority>:
{
 8002130:	b480      	push	{r7}
 8002132:	b089      	sub	sp, #36	; 0x24
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	f1c3 0307 	rsb	r3, r3, #7
 800214a:	2b04      	cmp	r3, #4
 800214c:	bf28      	it	cs
 800214e:	2304      	movcs	r3, #4
 8002150:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	3304      	adds	r3, #4
 8002156:	2b06      	cmp	r3, #6
 8002158:	d902      	bls.n	8002160 <NVIC_EncodePriority+0x30>
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	3b03      	subs	r3, #3
 800215e:	e000      	b.n	8002162 <NVIC_EncodePriority+0x32>
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002164:	f04f 32ff 	mov.w	r2, #4294967295
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	43da      	mvns	r2, r3
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	401a      	ands	r2, r3
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002178:	f04f 31ff 	mov.w	r1, #4294967295
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	fa01 f303 	lsl.w	r3, r1, r3
 8002182:	43d9      	mvns	r1, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002188:	4313      	orrs	r3, r2
}
 800218a:	4618      	mov	r0, r3
 800218c:	3724      	adds	r7, #36	; 0x24
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
	...

08002198 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3b01      	subs	r3, #1
 80021a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021a8:	d301      	bcc.n	80021ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021aa:	2301      	movs	r3, #1
 80021ac:	e00f      	b.n	80021ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ae:	4a0a      	ldr	r2, [pc, #40]	; (80021d8 <SysTick_Config+0x40>)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3b01      	subs	r3, #1
 80021b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021b6:	210f      	movs	r1, #15
 80021b8:	f04f 30ff 	mov.w	r0, #4294967295
 80021bc:	f7ff ff8e 	bl	80020dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021c0:	4b05      	ldr	r3, [pc, #20]	; (80021d8 <SysTick_Config+0x40>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021c6:	4b04      	ldr	r3, [pc, #16]	; (80021d8 <SysTick_Config+0x40>)
 80021c8:	2207      	movs	r2, #7
 80021ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	e000e010 	.word	0xe000e010

080021dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f7ff ff29 	bl	800203c <__NVIC_SetPriorityGrouping>
}
 80021ea:	bf00      	nop
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b086      	sub	sp, #24
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	4603      	mov	r3, r0
 80021fa:	60b9      	str	r1, [r7, #8]
 80021fc:	607a      	str	r2, [r7, #4]
 80021fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002200:	2300      	movs	r3, #0
 8002202:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002204:	f7ff ff3e 	bl	8002084 <__NVIC_GetPriorityGrouping>
 8002208:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	68b9      	ldr	r1, [r7, #8]
 800220e:	6978      	ldr	r0, [r7, #20]
 8002210:	f7ff ff8e 	bl	8002130 <NVIC_EncodePriority>
 8002214:	4602      	mov	r2, r0
 8002216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800221a:	4611      	mov	r1, r2
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff ff5d 	bl	80020dc <__NVIC_SetPriority>
}
 8002222:	bf00      	nop
 8002224:	3718      	adds	r7, #24
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b082      	sub	sp, #8
 800222e:	af00      	add	r7, sp, #0
 8002230:	4603      	mov	r3, r0
 8002232:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff ff31 	bl	80020a0 <__NVIC_EnableIRQ>
}
 800223e:	bf00      	nop
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b082      	sub	sp, #8
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7ff ffa2 	bl	8002198 <SysTick_Config>
 8002254:	4603      	mov	r3, r0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
	...

08002260 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002260:	b480      	push	{r7}
 8002262:	b089      	sub	sp, #36	; 0x24
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800226a:	2300      	movs	r3, #0
 800226c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800226e:	2300      	movs	r3, #0
 8002270:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002272:	2300      	movs	r3, #0
 8002274:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002276:	2300      	movs	r3, #0
 8002278:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800227a:	2300      	movs	r3, #0
 800227c:	61fb      	str	r3, [r7, #28]
 800227e:	e175      	b.n	800256c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002280:	2201      	movs	r2, #1
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	4013      	ands	r3, r2
 8002292:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	429a      	cmp	r2, r3
 800229a:	f040 8164 	bne.w	8002566 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f003 0303 	and.w	r3, r3, #3
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d005      	beq.n	80022b6 <HAL_GPIO_Init+0x56>
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f003 0303 	and.w	r3, r3, #3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d130      	bne.n	8002318 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	2203      	movs	r2, #3
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	43db      	mvns	r3, r3
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4013      	ands	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	68da      	ldr	r2, [r3, #12]
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4313      	orrs	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022ec:	2201      	movs	r2, #1
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	091b      	lsrs	r3, r3, #4
 8002302:	f003 0201 	and.w	r2, r3, #1
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f003 0303 	and.w	r3, r3, #3
 8002320:	2b03      	cmp	r3, #3
 8002322:	d017      	beq.n	8002354 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	2203      	movs	r2, #3
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	43db      	mvns	r3, r3
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4013      	ands	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4313      	orrs	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f003 0303 	and.w	r3, r3, #3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d123      	bne.n	80023a8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	08da      	lsrs	r2, r3, #3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3208      	adds	r2, #8
 8002368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800236c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	f003 0307 	and.w	r3, r3, #7
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	220f      	movs	r2, #15
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	43db      	mvns	r3, r3
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	4013      	ands	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	691a      	ldr	r2, [r3, #16]
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4313      	orrs	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	08da      	lsrs	r2, r3, #3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	3208      	adds	r2, #8
 80023a2:	69b9      	ldr	r1, [r7, #24]
 80023a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	2203      	movs	r2, #3
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	43db      	mvns	r3, r3
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	4013      	ands	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f003 0203 	and.w	r2, r3, #3
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f000 80be 	beq.w	8002566 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ea:	4b66      	ldr	r3, [pc, #408]	; (8002584 <HAL_GPIO_Init+0x324>)
 80023ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ee:	4a65      	ldr	r2, [pc, #404]	; (8002584 <HAL_GPIO_Init+0x324>)
 80023f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023f4:	6453      	str	r3, [r2, #68]	; 0x44
 80023f6:	4b63      	ldr	r3, [pc, #396]	; (8002584 <HAL_GPIO_Init+0x324>)
 80023f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002402:	4a61      	ldr	r2, [pc, #388]	; (8002588 <HAL_GPIO_Init+0x328>)
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	089b      	lsrs	r3, r3, #2
 8002408:	3302      	adds	r3, #2
 800240a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800240e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	220f      	movs	r2, #15
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43db      	mvns	r3, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4013      	ands	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a58      	ldr	r2, [pc, #352]	; (800258c <HAL_GPIO_Init+0x32c>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d037      	beq.n	800249e <HAL_GPIO_Init+0x23e>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a57      	ldr	r2, [pc, #348]	; (8002590 <HAL_GPIO_Init+0x330>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d031      	beq.n	800249a <HAL_GPIO_Init+0x23a>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a56      	ldr	r2, [pc, #344]	; (8002594 <HAL_GPIO_Init+0x334>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d02b      	beq.n	8002496 <HAL_GPIO_Init+0x236>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a55      	ldr	r2, [pc, #340]	; (8002598 <HAL_GPIO_Init+0x338>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d025      	beq.n	8002492 <HAL_GPIO_Init+0x232>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a54      	ldr	r2, [pc, #336]	; (800259c <HAL_GPIO_Init+0x33c>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d01f      	beq.n	800248e <HAL_GPIO_Init+0x22e>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a53      	ldr	r2, [pc, #332]	; (80025a0 <HAL_GPIO_Init+0x340>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d019      	beq.n	800248a <HAL_GPIO_Init+0x22a>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a52      	ldr	r2, [pc, #328]	; (80025a4 <HAL_GPIO_Init+0x344>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d013      	beq.n	8002486 <HAL_GPIO_Init+0x226>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a51      	ldr	r2, [pc, #324]	; (80025a8 <HAL_GPIO_Init+0x348>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d00d      	beq.n	8002482 <HAL_GPIO_Init+0x222>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a50      	ldr	r2, [pc, #320]	; (80025ac <HAL_GPIO_Init+0x34c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d007      	beq.n	800247e <HAL_GPIO_Init+0x21e>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a4f      	ldr	r2, [pc, #316]	; (80025b0 <HAL_GPIO_Init+0x350>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d101      	bne.n	800247a <HAL_GPIO_Init+0x21a>
 8002476:	2309      	movs	r3, #9
 8002478:	e012      	b.n	80024a0 <HAL_GPIO_Init+0x240>
 800247a:	230a      	movs	r3, #10
 800247c:	e010      	b.n	80024a0 <HAL_GPIO_Init+0x240>
 800247e:	2308      	movs	r3, #8
 8002480:	e00e      	b.n	80024a0 <HAL_GPIO_Init+0x240>
 8002482:	2307      	movs	r3, #7
 8002484:	e00c      	b.n	80024a0 <HAL_GPIO_Init+0x240>
 8002486:	2306      	movs	r3, #6
 8002488:	e00a      	b.n	80024a0 <HAL_GPIO_Init+0x240>
 800248a:	2305      	movs	r3, #5
 800248c:	e008      	b.n	80024a0 <HAL_GPIO_Init+0x240>
 800248e:	2304      	movs	r3, #4
 8002490:	e006      	b.n	80024a0 <HAL_GPIO_Init+0x240>
 8002492:	2303      	movs	r3, #3
 8002494:	e004      	b.n	80024a0 <HAL_GPIO_Init+0x240>
 8002496:	2302      	movs	r3, #2
 8002498:	e002      	b.n	80024a0 <HAL_GPIO_Init+0x240>
 800249a:	2301      	movs	r3, #1
 800249c:	e000      	b.n	80024a0 <HAL_GPIO_Init+0x240>
 800249e:	2300      	movs	r3, #0
 80024a0:	69fa      	ldr	r2, [r7, #28]
 80024a2:	f002 0203 	and.w	r2, r2, #3
 80024a6:	0092      	lsls	r2, r2, #2
 80024a8:	4093      	lsls	r3, r2
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80024b0:	4935      	ldr	r1, [pc, #212]	; (8002588 <HAL_GPIO_Init+0x328>)
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	089b      	lsrs	r3, r3, #2
 80024b6:	3302      	adds	r3, #2
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024be:	4b3d      	ldr	r3, [pc, #244]	; (80025b4 <HAL_GPIO_Init+0x354>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	43db      	mvns	r3, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4013      	ands	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	4313      	orrs	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024e2:	4a34      	ldr	r2, [pc, #208]	; (80025b4 <HAL_GPIO_Init+0x354>)
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024e8:	4b32      	ldr	r3, [pc, #200]	; (80025b4 <HAL_GPIO_Init+0x354>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	43db      	mvns	r3, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4013      	ands	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	4313      	orrs	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800250c:	4a29      	ldr	r2, [pc, #164]	; (80025b4 <HAL_GPIO_Init+0x354>)
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002512:	4b28      	ldr	r3, [pc, #160]	; (80025b4 <HAL_GPIO_Init+0x354>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	43db      	mvns	r3, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4013      	ands	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	4313      	orrs	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002536:	4a1f      	ldr	r2, [pc, #124]	; (80025b4 <HAL_GPIO_Init+0x354>)
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800253c:	4b1d      	ldr	r3, [pc, #116]	; (80025b4 <HAL_GPIO_Init+0x354>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	43db      	mvns	r3, r3
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4013      	ands	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d003      	beq.n	8002560 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	4313      	orrs	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002560:	4a14      	ldr	r2, [pc, #80]	; (80025b4 <HAL_GPIO_Init+0x354>)
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	3301      	adds	r3, #1
 800256a:	61fb      	str	r3, [r7, #28]
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	2b0f      	cmp	r3, #15
 8002570:	f67f ae86 	bls.w	8002280 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002574:	bf00      	nop
 8002576:	bf00      	nop
 8002578:	3724      	adds	r7, #36	; 0x24
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	40023800 	.word	0x40023800
 8002588:	40013800 	.word	0x40013800
 800258c:	40020000 	.word	0x40020000
 8002590:	40020400 	.word	0x40020400
 8002594:	40020800 	.word	0x40020800
 8002598:	40020c00 	.word	0x40020c00
 800259c:	40021000 	.word	0x40021000
 80025a0:	40021400 	.word	0x40021400
 80025a4:	40021800 	.word	0x40021800
 80025a8:	40021c00 	.word	0x40021c00
 80025ac:	40022000 	.word	0x40022000
 80025b0:	40022400 	.word	0x40022400
 80025b4:	40013c00 	.word	0x40013c00

080025b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	460b      	mov	r3, r1
 80025c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	691a      	ldr	r2, [r3, #16]
 80025c8:	887b      	ldrh	r3, [r7, #2]
 80025ca:	4013      	ands	r3, r2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d002      	beq.n	80025d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025d0:	2301      	movs	r3, #1
 80025d2:	73fb      	strb	r3, [r7, #15]
 80025d4:	e001      	b.n	80025da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025d6:	2300      	movs	r3, #0
 80025d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025da:	7bfb      	ldrb	r3, [r7, #15]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	807b      	strh	r3, [r7, #2]
 80025f4:	4613      	mov	r3, r2
 80025f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025f8:	787b      	ldrb	r3, [r7, #1]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d003      	beq.n	8002606 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025fe:	887a      	ldrh	r2, [r7, #2]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002604:	e003      	b.n	800260e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002606:	887b      	ldrh	r3, [r7, #2]
 8002608:	041a      	lsls	r2, r3, #16
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	619a      	str	r2, [r3, #24]
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
	...

0800261c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	4603      	mov	r3, r0
 8002624:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002626:	4b08      	ldr	r3, [pc, #32]	; (8002648 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002628:	695a      	ldr	r2, [r3, #20]
 800262a:	88fb      	ldrh	r3, [r7, #6]
 800262c:	4013      	ands	r3, r2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d006      	beq.n	8002640 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002632:	4a05      	ldr	r2, [pc, #20]	; (8002648 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002634:	88fb      	ldrh	r3, [r7, #6]
 8002636:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002638:	88fb      	ldrh	r3, [r7, #6]
 800263a:	4618      	mov	r0, r3
 800263c:	f000 f806 	bl	800264c <HAL_GPIO_EXTI_Callback>
  }
}
 8002640:	bf00      	nop
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40013c00 	.word	0x40013c00

0800264c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	4603      	mov	r3, r0
 8002654:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002656:	bf00      	nop
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
	...

08002664 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e0bf      	b.n	80027f6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d106      	bne.n	8002690 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7ff fafc 	bl	8001c88 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2202      	movs	r2, #2
 8002694:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	699a      	ldr	r2, [r3, #24]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80026a6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6999      	ldr	r1, [r3, #24]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80026bc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	430a      	orrs	r2, r1
 80026ca:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6899      	ldr	r1, [r3, #8]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	4b4a      	ldr	r3, [pc, #296]	; (8002800 <HAL_LTDC_Init+0x19c>)
 80026d8:	400b      	ands	r3, r1
 80026da:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	041b      	lsls	r3, r3, #16
 80026e2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6899      	ldr	r1, [r3, #8]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	699a      	ldr	r2, [r3, #24]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	431a      	orrs	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68d9      	ldr	r1, [r3, #12]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	4b3e      	ldr	r3, [pc, #248]	; (8002800 <HAL_LTDC_Init+0x19c>)
 8002706:	400b      	ands	r3, r1
 8002708:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	041b      	lsls	r3, r3, #16
 8002710:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68d9      	ldr	r1, [r3, #12]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a1a      	ldr	r2, [r3, #32]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	431a      	orrs	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	430a      	orrs	r2, r1
 8002726:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6919      	ldr	r1, [r3, #16]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	4b33      	ldr	r3, [pc, #204]	; (8002800 <HAL_LTDC_Init+0x19c>)
 8002734:	400b      	ands	r3, r1
 8002736:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273c:	041b      	lsls	r3, r3, #16
 800273e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6919      	ldr	r1, [r3, #16]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	431a      	orrs	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	430a      	orrs	r2, r1
 8002754:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6959      	ldr	r1, [r3, #20]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	4b27      	ldr	r3, [pc, #156]	; (8002800 <HAL_LTDC_Init+0x19c>)
 8002762:	400b      	ands	r3, r1
 8002764:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276a:	041b      	lsls	r3, r3, #16
 800276c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6959      	ldr	r1, [r3, #20]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	431a      	orrs	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	430a      	orrs	r2, r1
 8002782:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800278a:	021b      	lsls	r3, r3, #8
 800278c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002794:	041b      	lsls	r3, r3, #16
 8002796:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80027a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80027ba:	431a      	orrs	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	430a      	orrs	r2, r1
 80027c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f042 0206 	orr.w	r2, r2, #6
 80027d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	699a      	ldr	r2, [r3, #24]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f042 0201 	orr.w	r2, r2, #1
 80027e2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	f000f800 	.word	0xf000f800

08002804 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002804:	b5b0      	push	{r4, r5, r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002816:	2b01      	cmp	r3, #1
 8002818:	d101      	bne.n	800281e <HAL_LTDC_ConfigLayer+0x1a>
 800281a:	2302      	movs	r3, #2
 800281c:	e02c      	b.n	8002878 <HAL_LTDC_ConfigLayer+0x74>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2201      	movs	r2, #1
 8002822:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2202      	movs	r2, #2
 800282a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2134      	movs	r1, #52	; 0x34
 8002834:	fb01 f303 	mul.w	r3, r1, r3
 8002838:	4413      	add	r3, r2
 800283a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	4614      	mov	r4, r2
 8002842:	461d      	mov	r5, r3
 8002844:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002846:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002848:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800284a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800284c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800284e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002850:	682b      	ldr	r3, [r5, #0]
 8002852:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	68b9      	ldr	r1, [r7, #8]
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f000 f847 	bl	80028ec <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2201      	movs	r2, #1
 8002864:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bdb0      	pop	{r4, r5, r7, pc}

08002880 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002892:	2b01      	cmp	r3, #1
 8002894:	d101      	bne.n	800289a <HAL_LTDC_SetAddress+0x1a>
 8002896:	2302      	movs	r3, #2
 8002898:	e024      	b.n	80028e4 <HAL_LTDC_SetAddress+0x64>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2202      	movs	r2, #2
 80028a6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2234      	movs	r2, #52	; 0x34
 80028ae:	fb02 f303 	mul.w	r3, r2, r3
 80028b2:	3338      	adds	r3, #56	; 0x38
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	4413      	add	r3, r2
 80028b8:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	68ba      	ldr	r2, [r7, #8]
 80028be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	6979      	ldr	r1, [r7, #20]
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f000 f811 	bl	80028ec <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2201      	movs	r2, #1
 80028d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3718      	adds	r7, #24
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b089      	sub	sp, #36	; 0x24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	0c1b      	lsrs	r3, r3, #16
 8002904:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002908:	4413      	add	r3, r2
 800290a:	041b      	lsls	r3, r3, #16
 800290c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	461a      	mov	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	01db      	lsls	r3, r3, #7
 8002918:	4413      	add	r3, r2
 800291a:	3384      	adds	r3, #132	; 0x84
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	6812      	ldr	r2, [r2, #0]
 8002922:	4611      	mov	r1, r2
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	01d2      	lsls	r2, r2, #7
 8002928:	440a      	add	r2, r1
 800292a:	3284      	adds	r2, #132	; 0x84
 800292c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002930:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	0c1b      	lsrs	r3, r3, #16
 800293e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002942:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002944:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4619      	mov	r1, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	01db      	lsls	r3, r3, #7
 8002950:	440b      	add	r3, r1
 8002952:	3384      	adds	r3, #132	; 0x84
 8002954:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800295a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	68da      	ldr	r2, [r3, #12]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800296a:	4413      	add	r3, r2
 800296c:	041b      	lsls	r3, r3, #16
 800296e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	461a      	mov	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	01db      	lsls	r3, r3, #7
 800297a:	4413      	add	r3, r2
 800297c:	3384      	adds	r3, #132	; 0x84
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	6812      	ldr	r2, [r2, #0]
 8002984:	4611      	mov	r1, r2
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	01d2      	lsls	r2, r2, #7
 800298a:	440a      	add	r2, r1
 800298c:	3284      	adds	r2, #132	; 0x84
 800298e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002992:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029a2:	4413      	add	r3, r2
 80029a4:	1c5a      	adds	r2, r3, #1
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4619      	mov	r1, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	01db      	lsls	r3, r3, #7
 80029b0:	440b      	add	r3, r1
 80029b2:	3384      	adds	r3, #132	; 0x84
 80029b4:	4619      	mov	r1, r3
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	461a      	mov	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	01db      	lsls	r3, r3, #7
 80029c6:	4413      	add	r3, r2
 80029c8:	3384      	adds	r3, #132	; 0x84
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	6812      	ldr	r2, [r2, #0]
 80029d0:	4611      	mov	r1, r2
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	01d2      	lsls	r2, r2, #7
 80029d6:	440a      	add	r2, r1
 80029d8:	3284      	adds	r2, #132	; 0x84
 80029da:	f023 0307 	bic.w	r3, r3, #7
 80029de:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	461a      	mov	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	01db      	lsls	r3, r3, #7
 80029ea:	4413      	add	r3, r2
 80029ec:	3384      	adds	r3, #132	; 0x84
 80029ee:	461a      	mov	r2, r3
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80029fc:	021b      	lsls	r3, r3, #8
 80029fe:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002a06:	041b      	lsls	r3, r3, #16
 8002a08:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	061b      	lsls	r3, r3, #24
 8002a10:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	461a      	mov	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	01db      	lsls	r3, r3, #7
 8002a1c:	4413      	add	r3, r2
 8002a1e:	3384      	adds	r3, #132	; 0x84
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	461a      	mov	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	01db      	lsls	r3, r3, #7
 8002a2c:	4413      	add	r3, r2
 8002a2e:	3384      	adds	r3, #132	; 0x84
 8002a30:	461a      	mov	r2, r3
 8002a32:	2300      	movs	r3, #0
 8002a34:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	431a      	orrs	r2, r3
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	431a      	orrs	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	01db      	lsls	r3, r3, #7
 8002a50:	440b      	add	r3, r1
 8002a52:	3384      	adds	r3, #132	; 0x84
 8002a54:	4619      	mov	r1, r3
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	461a      	mov	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	01db      	lsls	r3, r3, #7
 8002a66:	4413      	add	r3, r2
 8002a68:	3384      	adds	r3, #132	; 0x84
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	6812      	ldr	r2, [r2, #0]
 8002a70:	4611      	mov	r1, r2
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	01d2      	lsls	r2, r2, #7
 8002a76:	440a      	add	r2, r1
 8002a78:	3284      	adds	r2, #132	; 0x84
 8002a7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a7e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	461a      	mov	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	01db      	lsls	r3, r3, #7
 8002a8a:	4413      	add	r3, r2
 8002a8c:	3384      	adds	r3, #132	; 0x84
 8002a8e:	461a      	mov	r2, r3
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	01db      	lsls	r3, r3, #7
 8002aa0:	4413      	add	r3, r2
 8002aa2:	3384      	adds	r3, #132	; 0x84
 8002aa4:	69da      	ldr	r2, [r3, #28]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4619      	mov	r1, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	01db      	lsls	r3, r3, #7
 8002ab0:	440b      	add	r3, r1
 8002ab2:	3384      	adds	r3, #132	; 0x84
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4b58      	ldr	r3, [pc, #352]	; (8002c18 <LTDC_SetConfig+0x32c>)
 8002ab8:	4013      	ands	r3, r2
 8002aba:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	69da      	ldr	r2, [r3, #28]
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	68f9      	ldr	r1, [r7, #12]
 8002ac6:	6809      	ldr	r1, [r1, #0]
 8002ac8:	4608      	mov	r0, r1
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	01c9      	lsls	r1, r1, #7
 8002ace:	4401      	add	r1, r0
 8002ad0:	3184      	adds	r1, #132	; 0x84
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	461a      	mov	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	01db      	lsls	r3, r3, #7
 8002ae0:	4413      	add	r3, r2
 8002ae2:	3384      	adds	r3, #132	; 0x84
 8002ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	461a      	mov	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	01db      	lsls	r3, r3, #7
 8002af0:	4413      	add	r3, r2
 8002af2:	3384      	adds	r3, #132	; 0x84
 8002af4:	461a      	mov	r2, r3
 8002af6:	2300      	movs	r3, #0
 8002af8:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	461a      	mov	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	01db      	lsls	r3, r3, #7
 8002b04:	4413      	add	r3, r2
 8002b06:	3384      	adds	r3, #132	; 0x84
 8002b08:	461a      	mov	r2, r3
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d102      	bne.n	8002b1e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8002b18:	2304      	movs	r3, #4
 8002b1a:	61fb      	str	r3, [r7, #28]
 8002b1c:	e01b      	b.n	8002b56 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d102      	bne.n	8002b2c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8002b26:	2303      	movs	r3, #3
 8002b28:	61fb      	str	r3, [r7, #28]
 8002b2a:	e014      	b.n	8002b56 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	2b04      	cmp	r3, #4
 8002b32:	d00b      	beq.n	8002b4c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d007      	beq.n	8002b4c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002b40:	2b03      	cmp	r3, #3
 8002b42:	d003      	beq.n	8002b4c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002b48:	2b07      	cmp	r3, #7
 8002b4a:	d102      	bne.n	8002b52 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	61fb      	str	r3, [r7, #28]
 8002b50:	e001      	b.n	8002b56 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8002b52:	2301      	movs	r3, #1
 8002b54:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	01db      	lsls	r3, r3, #7
 8002b60:	4413      	add	r3, r2
 8002b62:	3384      	adds	r3, #132	; 0x84
 8002b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	6812      	ldr	r2, [r2, #0]
 8002b6a:	4611      	mov	r1, r2
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	01d2      	lsls	r2, r2, #7
 8002b70:	440a      	add	r2, r1
 8002b72:	3284      	adds	r2, #132	; 0x84
 8002b74:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8002b78:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b7e:	69fa      	ldr	r2, [r7, #28]
 8002b80:	fb02 f303 	mul.w	r3, r2, r3
 8002b84:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	6859      	ldr	r1, [r3, #4]
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	1acb      	subs	r3, r1, r3
 8002b90:	69f9      	ldr	r1, [r7, #28]
 8002b92:	fb01 f303 	mul.w	r3, r1, r3
 8002b96:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8002b98:	68f9      	ldr	r1, [r7, #12]
 8002b9a:	6809      	ldr	r1, [r1, #0]
 8002b9c:	4608      	mov	r0, r1
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	01c9      	lsls	r1, r1, #7
 8002ba2:	4401      	add	r1, r0
 8002ba4:	3184      	adds	r1, #132	; 0x84
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	01db      	lsls	r3, r3, #7
 8002bb4:	4413      	add	r3, r2
 8002bb6:	3384      	adds	r3, #132	; 0x84
 8002bb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	01db      	lsls	r3, r3, #7
 8002bc4:	440b      	add	r3, r1
 8002bc6:	3384      	adds	r3, #132	; 0x84
 8002bc8:	4619      	mov	r1, r3
 8002bca:	4b14      	ldr	r3, [pc, #80]	; (8002c1c <LTDC_SetConfig+0x330>)
 8002bcc:	4013      	ands	r3, r2
 8002bce:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	01db      	lsls	r3, r3, #7
 8002bda:	4413      	add	r3, r2
 8002bdc:	3384      	adds	r3, #132	; 0x84
 8002bde:	461a      	mov	r2, r3
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	461a      	mov	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	01db      	lsls	r3, r3, #7
 8002bf0:	4413      	add	r3, r2
 8002bf2:	3384      	adds	r3, #132	; 0x84
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	6812      	ldr	r2, [r2, #0]
 8002bfa:	4611      	mov	r1, r2
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	01d2      	lsls	r2, r2, #7
 8002c00:	440a      	add	r2, r1
 8002c02:	3284      	adds	r2, #132	; 0x84
 8002c04:	f043 0301 	orr.w	r3, r3, #1
 8002c08:	6013      	str	r3, [r2, #0]
}
 8002c0a:	bf00      	nop
 8002c0c:	3724      	adds	r7, #36	; 0x24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	fffff8f8 	.word	0xfffff8f8
 8002c1c:	fffff800 	.word	0xfffff800

08002c20 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002c26:	2300      	movs	r3, #0
 8002c28:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c2a:	4b23      	ldr	r3, [pc, #140]	; (8002cb8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	4a22      	ldr	r2, [pc, #136]	; (8002cb8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c34:	6413      	str	r3, [r2, #64]	; 0x40
 8002c36:	4b20      	ldr	r3, [pc, #128]	; (8002cb8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c3e:	603b      	str	r3, [r7, #0]
 8002c40:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002c42:	4b1e      	ldr	r3, [pc, #120]	; (8002cbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a1d      	ldr	r2, [pc, #116]	; (8002cbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c4c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c4e:	f7ff f9e9 	bl	8002024 <HAL_GetTick>
 8002c52:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c54:	e009      	b.n	8002c6a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c56:	f7ff f9e5 	bl	8002024 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c64:	d901      	bls.n	8002c6a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e022      	b.n	8002cb0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c6a:	4b14      	ldr	r3, [pc, #80]	; (8002cbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c76:	d1ee      	bne.n	8002c56 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002c78:	4b10      	ldr	r3, [pc, #64]	; (8002cbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a0f      	ldr	r2, [pc, #60]	; (8002cbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c82:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c84:	f7ff f9ce 	bl	8002024 <HAL_GetTick>
 8002c88:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c8a:	e009      	b.n	8002ca0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c8c:	f7ff f9ca 	bl	8002024 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c9a:	d901      	bls.n	8002ca0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e007      	b.n	8002cb0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ca0:	4b06      	ldr	r3, [pc, #24]	; (8002cbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cac:	d1ee      	bne.n	8002c8c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	40007000 	.word	0x40007000

08002cc0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e291      	b.n	80031fa <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f000 8087 	beq.w	8002df2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ce4:	4b96      	ldr	r3, [pc, #600]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f003 030c 	and.w	r3, r3, #12
 8002cec:	2b04      	cmp	r3, #4
 8002cee:	d00c      	beq.n	8002d0a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cf0:	4b93      	ldr	r3, [pc, #588]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f003 030c 	and.w	r3, r3, #12
 8002cf8:	2b08      	cmp	r3, #8
 8002cfa:	d112      	bne.n	8002d22 <HAL_RCC_OscConfig+0x62>
 8002cfc:	4b90      	ldr	r3, [pc, #576]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d08:	d10b      	bne.n	8002d22 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d0a:	4b8d      	ldr	r3, [pc, #564]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d06c      	beq.n	8002df0 <HAL_RCC_OscConfig+0x130>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d168      	bne.n	8002df0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e26b      	b.n	80031fa <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d2a:	d106      	bne.n	8002d3a <HAL_RCC_OscConfig+0x7a>
 8002d2c:	4b84      	ldr	r3, [pc, #528]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a83      	ldr	r2, [pc, #524]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002d32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d36:	6013      	str	r3, [r2, #0]
 8002d38:	e02e      	b.n	8002d98 <HAL_RCC_OscConfig+0xd8>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10c      	bne.n	8002d5c <HAL_RCC_OscConfig+0x9c>
 8002d42:	4b7f      	ldr	r3, [pc, #508]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a7e      	ldr	r2, [pc, #504]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002d48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d4c:	6013      	str	r3, [r2, #0]
 8002d4e:	4b7c      	ldr	r3, [pc, #496]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a7b      	ldr	r2, [pc, #492]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002d54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d58:	6013      	str	r3, [r2, #0]
 8002d5a:	e01d      	b.n	8002d98 <HAL_RCC_OscConfig+0xd8>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d64:	d10c      	bne.n	8002d80 <HAL_RCC_OscConfig+0xc0>
 8002d66:	4b76      	ldr	r3, [pc, #472]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a75      	ldr	r2, [pc, #468]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002d6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d70:	6013      	str	r3, [r2, #0]
 8002d72:	4b73      	ldr	r3, [pc, #460]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a72      	ldr	r2, [pc, #456]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d7c:	6013      	str	r3, [r2, #0]
 8002d7e:	e00b      	b.n	8002d98 <HAL_RCC_OscConfig+0xd8>
 8002d80:	4b6f      	ldr	r3, [pc, #444]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a6e      	ldr	r2, [pc, #440]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002d86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d8a:	6013      	str	r3, [r2, #0]
 8002d8c:	4b6c      	ldr	r3, [pc, #432]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a6b      	ldr	r2, [pc, #428]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002d92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d013      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da0:	f7ff f940 	bl	8002024 <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002da8:	f7ff f93c 	bl	8002024 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b64      	cmp	r3, #100	; 0x64
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e21f      	b.n	80031fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dba:	4b61      	ldr	r3, [pc, #388]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d0f0      	beq.n	8002da8 <HAL_RCC_OscConfig+0xe8>
 8002dc6:	e014      	b.n	8002df2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc8:	f7ff f92c 	bl	8002024 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dd0:	f7ff f928 	bl	8002024 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b64      	cmp	r3, #100	; 0x64
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e20b      	b.n	80031fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002de2:	4b57      	ldr	r3, [pc, #348]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1f0      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x110>
 8002dee:	e000      	b.n	8002df2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d069      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dfe:	4b50      	ldr	r3, [pc, #320]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 030c 	and.w	r3, r3, #12
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00b      	beq.n	8002e22 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e0a:	4b4d      	ldr	r3, [pc, #308]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 030c 	and.w	r3, r3, #12
 8002e12:	2b08      	cmp	r3, #8
 8002e14:	d11c      	bne.n	8002e50 <HAL_RCC_OscConfig+0x190>
 8002e16:	4b4a      	ldr	r3, [pc, #296]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d116      	bne.n	8002e50 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e22:	4b47      	ldr	r3, [pc, #284]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d005      	beq.n	8002e3a <HAL_RCC_OscConfig+0x17a>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d001      	beq.n	8002e3a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e1df      	b.n	80031fa <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e3a:	4b41      	ldr	r3, [pc, #260]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	493d      	ldr	r1, [pc, #244]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e4e:	e040      	b.n	8002ed2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d023      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e58:	4b39      	ldr	r3, [pc, #228]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a38      	ldr	r2, [pc, #224]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002e5e:	f043 0301 	orr.w	r3, r3, #1
 8002e62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e64:	f7ff f8de 	bl	8002024 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e6c:	f7ff f8da 	bl	8002024 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e1bd      	b.n	80031fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e7e:	4b30      	ldr	r3, [pc, #192]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0f0      	beq.n	8002e6c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e8a:	4b2d      	ldr	r3, [pc, #180]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	4929      	ldr	r1, [pc, #164]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	600b      	str	r3, [r1, #0]
 8002e9e:	e018      	b.n	8002ed2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ea0:	4b27      	ldr	r3, [pc, #156]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a26      	ldr	r2, [pc, #152]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002ea6:	f023 0301 	bic.w	r3, r3, #1
 8002eaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eac:	f7ff f8ba 	bl	8002024 <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eb4:	f7ff f8b6 	bl	8002024 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e199      	b.n	80031fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ec6:	4b1e      	ldr	r3, [pc, #120]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1f0      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0308 	and.w	r3, r3, #8
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d038      	beq.n	8002f50 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d019      	beq.n	8002f1a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ee6:	4b16      	ldr	r3, [pc, #88]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002ee8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eea:	4a15      	ldr	r2, [pc, #84]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002eec:	f043 0301 	orr.w	r3, r3, #1
 8002ef0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef2:	f7ff f897 	bl	8002024 <HAL_GetTick>
 8002ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ef8:	e008      	b.n	8002f0c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002efa:	f7ff f893 	bl	8002024 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d901      	bls.n	8002f0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e176      	b.n	80031fa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f0c:	4b0c      	ldr	r3, [pc, #48]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002f0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d0f0      	beq.n	8002efa <HAL_RCC_OscConfig+0x23a>
 8002f18:	e01a      	b.n	8002f50 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f1a:	4b09      	ldr	r3, [pc, #36]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f1e:	4a08      	ldr	r2, [pc, #32]	; (8002f40 <HAL_RCC_OscConfig+0x280>)
 8002f20:	f023 0301 	bic.w	r3, r3, #1
 8002f24:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f26:	f7ff f87d 	bl	8002024 <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f2c:	e00a      	b.n	8002f44 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f2e:	f7ff f879 	bl	8002024 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d903      	bls.n	8002f44 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e15c      	b.n	80031fa <HAL_RCC_OscConfig+0x53a>
 8002f40:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f44:	4b91      	ldr	r3, [pc, #580]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 8002f46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1ee      	bne.n	8002f2e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0304 	and.w	r3, r3, #4
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f000 80a4 	beq.w	80030a6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f5e:	4b8b      	ldr	r3, [pc, #556]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10d      	bne.n	8002f86 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f6a:	4b88      	ldr	r3, [pc, #544]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	4a87      	ldr	r2, [pc, #540]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 8002f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f74:	6413      	str	r3, [r2, #64]	; 0x40
 8002f76:	4b85      	ldr	r3, [pc, #532]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f7e:	60bb      	str	r3, [r7, #8]
 8002f80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f82:	2301      	movs	r3, #1
 8002f84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f86:	4b82      	ldr	r3, [pc, #520]	; (8003190 <HAL_RCC_OscConfig+0x4d0>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d118      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002f92:	4b7f      	ldr	r3, [pc, #508]	; (8003190 <HAL_RCC_OscConfig+0x4d0>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a7e      	ldr	r2, [pc, #504]	; (8003190 <HAL_RCC_OscConfig+0x4d0>)
 8002f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f9e:	f7ff f841 	bl	8002024 <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fa6:	f7ff f83d 	bl	8002024 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b64      	cmp	r3, #100	; 0x64
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e120      	b.n	80031fa <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fb8:	4b75      	ldr	r3, [pc, #468]	; (8003190 <HAL_RCC_OscConfig+0x4d0>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0f0      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d106      	bne.n	8002fda <HAL_RCC_OscConfig+0x31a>
 8002fcc:	4b6f      	ldr	r3, [pc, #444]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 8002fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd0:	4a6e      	ldr	r2, [pc, #440]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 8002fd2:	f043 0301 	orr.w	r3, r3, #1
 8002fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fd8:	e02d      	b.n	8003036 <HAL_RCC_OscConfig+0x376>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10c      	bne.n	8002ffc <HAL_RCC_OscConfig+0x33c>
 8002fe2:	4b6a      	ldr	r3, [pc, #424]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 8002fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe6:	4a69      	ldr	r2, [pc, #420]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 8002fe8:	f023 0301 	bic.w	r3, r3, #1
 8002fec:	6713      	str	r3, [r2, #112]	; 0x70
 8002fee:	4b67      	ldr	r3, [pc, #412]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 8002ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff2:	4a66      	ldr	r2, [pc, #408]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 8002ff4:	f023 0304 	bic.w	r3, r3, #4
 8002ff8:	6713      	str	r3, [r2, #112]	; 0x70
 8002ffa:	e01c      	b.n	8003036 <HAL_RCC_OscConfig+0x376>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	2b05      	cmp	r3, #5
 8003002:	d10c      	bne.n	800301e <HAL_RCC_OscConfig+0x35e>
 8003004:	4b61      	ldr	r3, [pc, #388]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 8003006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003008:	4a60      	ldr	r2, [pc, #384]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 800300a:	f043 0304 	orr.w	r3, r3, #4
 800300e:	6713      	str	r3, [r2, #112]	; 0x70
 8003010:	4b5e      	ldr	r3, [pc, #376]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 8003012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003014:	4a5d      	ldr	r2, [pc, #372]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 8003016:	f043 0301 	orr.w	r3, r3, #1
 800301a:	6713      	str	r3, [r2, #112]	; 0x70
 800301c:	e00b      	b.n	8003036 <HAL_RCC_OscConfig+0x376>
 800301e:	4b5b      	ldr	r3, [pc, #364]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 8003020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003022:	4a5a      	ldr	r2, [pc, #360]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 8003024:	f023 0301 	bic.w	r3, r3, #1
 8003028:	6713      	str	r3, [r2, #112]	; 0x70
 800302a:	4b58      	ldr	r3, [pc, #352]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 800302c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302e:	4a57      	ldr	r2, [pc, #348]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 8003030:	f023 0304 	bic.w	r3, r3, #4
 8003034:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d015      	beq.n	800306a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800303e:	f7fe fff1 	bl	8002024 <HAL_GetTick>
 8003042:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003044:	e00a      	b.n	800305c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003046:	f7fe ffed 	bl	8002024 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	f241 3288 	movw	r2, #5000	; 0x1388
 8003054:	4293      	cmp	r3, r2
 8003056:	d901      	bls.n	800305c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e0ce      	b.n	80031fa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800305c:	4b4b      	ldr	r3, [pc, #300]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 800305e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d0ee      	beq.n	8003046 <HAL_RCC_OscConfig+0x386>
 8003068:	e014      	b.n	8003094 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800306a:	f7fe ffdb 	bl	8002024 <HAL_GetTick>
 800306e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003070:	e00a      	b.n	8003088 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003072:	f7fe ffd7 	bl	8002024 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003080:	4293      	cmp	r3, r2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e0b8      	b.n	80031fa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003088:	4b40      	ldr	r3, [pc, #256]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 800308a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1ee      	bne.n	8003072 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003094:	7dfb      	ldrb	r3, [r7, #23]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d105      	bne.n	80030a6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800309a:	4b3c      	ldr	r3, [pc, #240]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	4a3b      	ldr	r2, [pc, #236]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 80030a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f000 80a4 	beq.w	80031f8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030b0:	4b36      	ldr	r3, [pc, #216]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f003 030c 	and.w	r3, r3, #12
 80030b8:	2b08      	cmp	r3, #8
 80030ba:	d06b      	beq.n	8003194 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d149      	bne.n	8003158 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030c4:	4b31      	ldr	r3, [pc, #196]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a30      	ldr	r2, [pc, #192]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 80030ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d0:	f7fe ffa8 	bl	8002024 <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d8:	f7fe ffa4 	bl	8002024 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e087      	b.n	80031fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ea:	4b28      	ldr	r3, [pc, #160]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1f0      	bne.n	80030d8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69da      	ldr	r2, [r3, #28]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	431a      	orrs	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	019b      	lsls	r3, r3, #6
 8003106:	431a      	orrs	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310c:	085b      	lsrs	r3, r3, #1
 800310e:	3b01      	subs	r3, #1
 8003110:	041b      	lsls	r3, r3, #16
 8003112:	431a      	orrs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003118:	061b      	lsls	r3, r3, #24
 800311a:	4313      	orrs	r3, r2
 800311c:	4a1b      	ldr	r2, [pc, #108]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 800311e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003122:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003124:	4b19      	ldr	r3, [pc, #100]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a18      	ldr	r2, [pc, #96]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 800312a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800312e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003130:	f7fe ff78 	bl	8002024 <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003138:	f7fe ff74 	bl	8002024 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e057      	b.n	80031fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800314a:	4b10      	ldr	r3, [pc, #64]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0f0      	beq.n	8003138 <HAL_RCC_OscConfig+0x478>
 8003156:	e04f      	b.n	80031f8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003158:	4b0c      	ldr	r3, [pc, #48]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a0b      	ldr	r2, [pc, #44]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 800315e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003162:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003164:	f7fe ff5e 	bl	8002024 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800316c:	f7fe ff5a 	bl	8002024 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e03d      	b.n	80031fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800317e:	4b03      	ldr	r3, [pc, #12]	; (800318c <HAL_RCC_OscConfig+0x4cc>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1f0      	bne.n	800316c <HAL_RCC_OscConfig+0x4ac>
 800318a:	e035      	b.n	80031f8 <HAL_RCC_OscConfig+0x538>
 800318c:	40023800 	.word	0x40023800
 8003190:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003194:	4b1b      	ldr	r3, [pc, #108]	; (8003204 <HAL_RCC_OscConfig+0x544>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d028      	beq.n	80031f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d121      	bne.n	80031f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d11a      	bne.n	80031f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031c4:	4013      	ands	r3, r2
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031ca:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d111      	bne.n	80031f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031da:	085b      	lsrs	r3, r3, #1
 80031dc:	3b01      	subs	r3, #1
 80031de:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d107      	bne.n	80031f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ee:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d001      	beq.n	80031f8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e000      	b.n	80031fa <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3718      	adds	r7, #24
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	40023800 	.word	0x40023800

08003208 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003212:	2300      	movs	r3, #0
 8003214:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e0d0      	b.n	80033c2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003220:	4b6a      	ldr	r3, [pc, #424]	; (80033cc <HAL_RCC_ClockConfig+0x1c4>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 030f 	and.w	r3, r3, #15
 8003228:	683a      	ldr	r2, [r7, #0]
 800322a:	429a      	cmp	r2, r3
 800322c:	d910      	bls.n	8003250 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800322e:	4b67      	ldr	r3, [pc, #412]	; (80033cc <HAL_RCC_ClockConfig+0x1c4>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f023 020f 	bic.w	r2, r3, #15
 8003236:	4965      	ldr	r1, [pc, #404]	; (80033cc <HAL_RCC_ClockConfig+0x1c4>)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	4313      	orrs	r3, r2
 800323c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800323e:	4b63      	ldr	r3, [pc, #396]	; (80033cc <HAL_RCC_ClockConfig+0x1c4>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 030f 	and.w	r3, r3, #15
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	429a      	cmp	r2, r3
 800324a:	d001      	beq.n	8003250 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e0b8      	b.n	80033c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d020      	beq.n	800329e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	2b00      	cmp	r3, #0
 8003266:	d005      	beq.n	8003274 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003268:	4b59      	ldr	r3, [pc, #356]	; (80033d0 <HAL_RCC_ClockConfig+0x1c8>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	4a58      	ldr	r2, [pc, #352]	; (80033d0 <HAL_RCC_ClockConfig+0x1c8>)
 800326e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003272:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0308 	and.w	r3, r3, #8
 800327c:	2b00      	cmp	r3, #0
 800327e:	d005      	beq.n	800328c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003280:	4b53      	ldr	r3, [pc, #332]	; (80033d0 <HAL_RCC_ClockConfig+0x1c8>)
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	4a52      	ldr	r2, [pc, #328]	; (80033d0 <HAL_RCC_ClockConfig+0x1c8>)
 8003286:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800328a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800328c:	4b50      	ldr	r3, [pc, #320]	; (80033d0 <HAL_RCC_ClockConfig+0x1c8>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	494d      	ldr	r1, [pc, #308]	; (80033d0 <HAL_RCC_ClockConfig+0x1c8>)
 800329a:	4313      	orrs	r3, r2
 800329c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d040      	beq.n	800332c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d107      	bne.n	80032c2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032b2:	4b47      	ldr	r3, [pc, #284]	; (80033d0 <HAL_RCC_ClockConfig+0x1c8>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d115      	bne.n	80032ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e07f      	b.n	80033c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d107      	bne.n	80032da <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ca:	4b41      	ldr	r3, [pc, #260]	; (80033d0 <HAL_RCC_ClockConfig+0x1c8>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d109      	bne.n	80032ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e073      	b.n	80033c2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032da:	4b3d      	ldr	r3, [pc, #244]	; (80033d0 <HAL_RCC_ClockConfig+0x1c8>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e06b      	b.n	80033c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ea:	4b39      	ldr	r3, [pc, #228]	; (80033d0 <HAL_RCC_ClockConfig+0x1c8>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f023 0203 	bic.w	r2, r3, #3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	4936      	ldr	r1, [pc, #216]	; (80033d0 <HAL_RCC_ClockConfig+0x1c8>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032fc:	f7fe fe92 	bl	8002024 <HAL_GetTick>
 8003300:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003302:	e00a      	b.n	800331a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003304:	f7fe fe8e 	bl	8002024 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003312:	4293      	cmp	r3, r2
 8003314:	d901      	bls.n	800331a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e053      	b.n	80033c2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800331a:	4b2d      	ldr	r3, [pc, #180]	; (80033d0 <HAL_RCC_ClockConfig+0x1c8>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f003 020c 	and.w	r2, r3, #12
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	429a      	cmp	r2, r3
 800332a:	d1eb      	bne.n	8003304 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800332c:	4b27      	ldr	r3, [pc, #156]	; (80033cc <HAL_RCC_ClockConfig+0x1c4>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 030f 	and.w	r3, r3, #15
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	429a      	cmp	r2, r3
 8003338:	d210      	bcs.n	800335c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800333a:	4b24      	ldr	r3, [pc, #144]	; (80033cc <HAL_RCC_ClockConfig+0x1c4>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f023 020f 	bic.w	r2, r3, #15
 8003342:	4922      	ldr	r1, [pc, #136]	; (80033cc <HAL_RCC_ClockConfig+0x1c4>)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	4313      	orrs	r3, r2
 8003348:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800334a:	4b20      	ldr	r3, [pc, #128]	; (80033cc <HAL_RCC_ClockConfig+0x1c4>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 030f 	and.w	r3, r3, #15
 8003352:	683a      	ldr	r2, [r7, #0]
 8003354:	429a      	cmp	r2, r3
 8003356:	d001      	beq.n	800335c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e032      	b.n	80033c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b00      	cmp	r3, #0
 8003366:	d008      	beq.n	800337a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003368:	4b19      	ldr	r3, [pc, #100]	; (80033d0 <HAL_RCC_ClockConfig+0x1c8>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	4916      	ldr	r1, [pc, #88]	; (80033d0 <HAL_RCC_ClockConfig+0x1c8>)
 8003376:	4313      	orrs	r3, r2
 8003378:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0308 	and.w	r3, r3, #8
 8003382:	2b00      	cmp	r3, #0
 8003384:	d009      	beq.n	800339a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003386:	4b12      	ldr	r3, [pc, #72]	; (80033d0 <HAL_RCC_ClockConfig+0x1c8>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	490e      	ldr	r1, [pc, #56]	; (80033d0 <HAL_RCC_ClockConfig+0x1c8>)
 8003396:	4313      	orrs	r3, r2
 8003398:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800339a:	f000 f821 	bl	80033e0 <HAL_RCC_GetSysClockFreq>
 800339e:	4602      	mov	r2, r0
 80033a0:	4b0b      	ldr	r3, [pc, #44]	; (80033d0 <HAL_RCC_ClockConfig+0x1c8>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	091b      	lsrs	r3, r3, #4
 80033a6:	f003 030f 	and.w	r3, r3, #15
 80033aa:	490a      	ldr	r1, [pc, #40]	; (80033d4 <HAL_RCC_ClockConfig+0x1cc>)
 80033ac:	5ccb      	ldrb	r3, [r1, r3]
 80033ae:	fa22 f303 	lsr.w	r3, r2, r3
 80033b2:	4a09      	ldr	r2, [pc, #36]	; (80033d8 <HAL_RCC_ClockConfig+0x1d0>)
 80033b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80033b6:	4b09      	ldr	r3, [pc, #36]	; (80033dc <HAL_RCC_ClockConfig+0x1d4>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7fe fdee 	bl	8001f9c <HAL_InitTick>

  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	40023c00 	.word	0x40023c00
 80033d0:	40023800 	.word	0x40023800
 80033d4:	0800fb6c 	.word	0x0800fb6c
 80033d8:	20000000 	.word	0x20000000
 80033dc:	20000004 	.word	0x20000004

080033e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033e4:	b090      	sub	sp, #64	; 0x40
 80033e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80033e8:	2300      	movs	r3, #0
 80033ea:	637b      	str	r3, [r7, #52]	; 0x34
 80033ec:	2300      	movs	r3, #0
 80033ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033f0:	2300      	movs	r3, #0
 80033f2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80033f4:	2300      	movs	r3, #0
 80033f6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033f8:	4b59      	ldr	r3, [pc, #356]	; (8003560 <HAL_RCC_GetSysClockFreq+0x180>)
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f003 030c 	and.w	r3, r3, #12
 8003400:	2b08      	cmp	r3, #8
 8003402:	d00d      	beq.n	8003420 <HAL_RCC_GetSysClockFreq+0x40>
 8003404:	2b08      	cmp	r3, #8
 8003406:	f200 80a1 	bhi.w	800354c <HAL_RCC_GetSysClockFreq+0x16c>
 800340a:	2b00      	cmp	r3, #0
 800340c:	d002      	beq.n	8003414 <HAL_RCC_GetSysClockFreq+0x34>
 800340e:	2b04      	cmp	r3, #4
 8003410:	d003      	beq.n	800341a <HAL_RCC_GetSysClockFreq+0x3a>
 8003412:	e09b      	b.n	800354c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003414:	4b53      	ldr	r3, [pc, #332]	; (8003564 <HAL_RCC_GetSysClockFreq+0x184>)
 8003416:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003418:	e09b      	b.n	8003552 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800341a:	4b53      	ldr	r3, [pc, #332]	; (8003568 <HAL_RCC_GetSysClockFreq+0x188>)
 800341c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800341e:	e098      	b.n	8003552 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003420:	4b4f      	ldr	r3, [pc, #316]	; (8003560 <HAL_RCC_GetSysClockFreq+0x180>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003428:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800342a:	4b4d      	ldr	r3, [pc, #308]	; (8003560 <HAL_RCC_GetSysClockFreq+0x180>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d028      	beq.n	8003488 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003436:	4b4a      	ldr	r3, [pc, #296]	; (8003560 <HAL_RCC_GetSysClockFreq+0x180>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	099b      	lsrs	r3, r3, #6
 800343c:	2200      	movs	r2, #0
 800343e:	623b      	str	r3, [r7, #32]
 8003440:	627a      	str	r2, [r7, #36]	; 0x24
 8003442:	6a3b      	ldr	r3, [r7, #32]
 8003444:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003448:	2100      	movs	r1, #0
 800344a:	4b47      	ldr	r3, [pc, #284]	; (8003568 <HAL_RCC_GetSysClockFreq+0x188>)
 800344c:	fb03 f201 	mul.w	r2, r3, r1
 8003450:	2300      	movs	r3, #0
 8003452:	fb00 f303 	mul.w	r3, r0, r3
 8003456:	4413      	add	r3, r2
 8003458:	4a43      	ldr	r2, [pc, #268]	; (8003568 <HAL_RCC_GetSysClockFreq+0x188>)
 800345a:	fba0 1202 	umull	r1, r2, r0, r2
 800345e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003460:	460a      	mov	r2, r1
 8003462:	62ba      	str	r2, [r7, #40]	; 0x28
 8003464:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003466:	4413      	add	r3, r2
 8003468:	62fb      	str	r3, [r7, #44]	; 0x2c
 800346a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800346c:	2200      	movs	r2, #0
 800346e:	61bb      	str	r3, [r7, #24]
 8003470:	61fa      	str	r2, [r7, #28]
 8003472:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003476:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800347a:	f7fc fec5 	bl	8000208 <__aeabi_uldivmod>
 800347e:	4602      	mov	r2, r0
 8003480:	460b      	mov	r3, r1
 8003482:	4613      	mov	r3, r2
 8003484:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003486:	e053      	b.n	8003530 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003488:	4b35      	ldr	r3, [pc, #212]	; (8003560 <HAL_RCC_GetSysClockFreq+0x180>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	099b      	lsrs	r3, r3, #6
 800348e:	2200      	movs	r2, #0
 8003490:	613b      	str	r3, [r7, #16]
 8003492:	617a      	str	r2, [r7, #20]
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800349a:	f04f 0b00 	mov.w	fp, #0
 800349e:	4652      	mov	r2, sl
 80034a0:	465b      	mov	r3, fp
 80034a2:	f04f 0000 	mov.w	r0, #0
 80034a6:	f04f 0100 	mov.w	r1, #0
 80034aa:	0159      	lsls	r1, r3, #5
 80034ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034b0:	0150      	lsls	r0, r2, #5
 80034b2:	4602      	mov	r2, r0
 80034b4:	460b      	mov	r3, r1
 80034b6:	ebb2 080a 	subs.w	r8, r2, sl
 80034ba:	eb63 090b 	sbc.w	r9, r3, fp
 80034be:	f04f 0200 	mov.w	r2, #0
 80034c2:	f04f 0300 	mov.w	r3, #0
 80034c6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80034ca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80034ce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80034d2:	ebb2 0408 	subs.w	r4, r2, r8
 80034d6:	eb63 0509 	sbc.w	r5, r3, r9
 80034da:	f04f 0200 	mov.w	r2, #0
 80034de:	f04f 0300 	mov.w	r3, #0
 80034e2:	00eb      	lsls	r3, r5, #3
 80034e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034e8:	00e2      	lsls	r2, r4, #3
 80034ea:	4614      	mov	r4, r2
 80034ec:	461d      	mov	r5, r3
 80034ee:	eb14 030a 	adds.w	r3, r4, sl
 80034f2:	603b      	str	r3, [r7, #0]
 80034f4:	eb45 030b 	adc.w	r3, r5, fp
 80034f8:	607b      	str	r3, [r7, #4]
 80034fa:	f04f 0200 	mov.w	r2, #0
 80034fe:	f04f 0300 	mov.w	r3, #0
 8003502:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003506:	4629      	mov	r1, r5
 8003508:	028b      	lsls	r3, r1, #10
 800350a:	4621      	mov	r1, r4
 800350c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003510:	4621      	mov	r1, r4
 8003512:	028a      	lsls	r2, r1, #10
 8003514:	4610      	mov	r0, r2
 8003516:	4619      	mov	r1, r3
 8003518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800351a:	2200      	movs	r2, #0
 800351c:	60bb      	str	r3, [r7, #8]
 800351e:	60fa      	str	r2, [r7, #12]
 8003520:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003524:	f7fc fe70 	bl	8000208 <__aeabi_uldivmod>
 8003528:	4602      	mov	r2, r0
 800352a:	460b      	mov	r3, r1
 800352c:	4613      	mov	r3, r2
 800352e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003530:	4b0b      	ldr	r3, [pc, #44]	; (8003560 <HAL_RCC_GetSysClockFreq+0x180>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	0c1b      	lsrs	r3, r3, #16
 8003536:	f003 0303 	and.w	r3, r3, #3
 800353a:	3301      	adds	r3, #1
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003540:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003544:	fbb2 f3f3 	udiv	r3, r2, r3
 8003548:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800354a:	e002      	b.n	8003552 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800354c:	4b05      	ldr	r3, [pc, #20]	; (8003564 <HAL_RCC_GetSysClockFreq+0x184>)
 800354e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003550:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003554:	4618      	mov	r0, r3
 8003556:	3740      	adds	r7, #64	; 0x40
 8003558:	46bd      	mov	sp, r7
 800355a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800355e:	bf00      	nop
 8003560:	40023800 	.word	0x40023800
 8003564:	00f42400 	.word	0x00f42400
 8003568:	017d7840 	.word	0x017d7840

0800356c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b088      	sub	sp, #32
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003574:	2300      	movs	r3, #0
 8003576:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003578:	2300      	movs	r3, #0
 800357a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800357c:	2300      	movs	r3, #0
 800357e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003580:	2300      	movs	r3, #0
 8003582:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003584:	2300      	movs	r3, #0
 8003586:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0301 	and.w	r3, r3, #1
 8003590:	2b00      	cmp	r3, #0
 8003592:	d012      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003594:	4b69      	ldr	r3, [pc, #420]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	4a68      	ldr	r2, [pc, #416]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800359a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800359e:	6093      	str	r3, [r2, #8]
 80035a0:	4b66      	ldr	r3, [pc, #408]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035a2:	689a      	ldr	r2, [r3, #8]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035a8:	4964      	ldr	r1, [pc, #400]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80035b6:	2301      	movs	r3, #1
 80035b8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d017      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035c6:	4b5d      	ldr	r3, [pc, #372]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d4:	4959      	ldr	r1, [pc, #356]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035e4:	d101      	bne.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80035e6:	2301      	movs	r3, #1
 80035e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80035f2:	2301      	movs	r3, #1
 80035f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d017      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003602:	4b4e      	ldr	r3, [pc, #312]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003604:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003608:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003610:	494a      	ldr	r1, [pc, #296]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003612:	4313      	orrs	r3, r2
 8003614:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003620:	d101      	bne.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003622:	2301      	movs	r3, #1
 8003624:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800362e:	2301      	movs	r3, #1
 8003630:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800363e:	2301      	movs	r3, #1
 8003640:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0320 	and.w	r3, r3, #32
 800364a:	2b00      	cmp	r3, #0
 800364c:	f000 808b 	beq.w	8003766 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003650:	4b3a      	ldr	r3, [pc, #232]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003654:	4a39      	ldr	r2, [pc, #228]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800365a:	6413      	str	r3, [r2, #64]	; 0x40
 800365c:	4b37      	ldr	r3, [pc, #220]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800365e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003664:	60bb      	str	r3, [r7, #8]
 8003666:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003668:	4b35      	ldr	r3, [pc, #212]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a34      	ldr	r2, [pc, #208]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800366e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003672:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003674:	f7fe fcd6 	bl	8002024 <HAL_GetTick>
 8003678:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800367a:	e008      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800367c:	f7fe fcd2 	bl	8002024 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b64      	cmp	r3, #100	; 0x64
 8003688:	d901      	bls.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e357      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800368e:	4b2c      	ldr	r3, [pc, #176]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003696:	2b00      	cmp	r3, #0
 8003698:	d0f0      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800369a:	4b28      	ldr	r3, [pc, #160]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800369c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036a2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d035      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d02e      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036b8:	4b20      	ldr	r3, [pc, #128]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036c0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036c2:	4b1e      	ldr	r3, [pc, #120]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c6:	4a1d      	ldr	r2, [pc, #116]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036cc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036ce:	4b1b      	ldr	r3, [pc, #108]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d2:	4a1a      	ldr	r2, [pc, #104]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036d8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80036da:	4a18      	ldr	r2, [pc, #96]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80036e0:	4b16      	ldr	r3, [pc, #88]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d114      	bne.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ec:	f7fe fc9a 	bl	8002024 <HAL_GetTick>
 80036f0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f2:	e00a      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036f4:	f7fe fc96 	bl	8002024 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003702:	4293      	cmp	r3, r2
 8003704:	d901      	bls.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e319      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800370a:	4b0c      	ldr	r3, [pc, #48]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800370c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d0ee      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800371e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003722:	d111      	bne.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003724:	4b05      	ldr	r3, [pc, #20]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003730:	4b04      	ldr	r3, [pc, #16]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003732:	400b      	ands	r3, r1
 8003734:	4901      	ldr	r1, [pc, #4]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003736:	4313      	orrs	r3, r2
 8003738:	608b      	str	r3, [r1, #8]
 800373a:	e00b      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800373c:	40023800 	.word	0x40023800
 8003740:	40007000 	.word	0x40007000
 8003744:	0ffffcff 	.word	0x0ffffcff
 8003748:	4baa      	ldr	r3, [pc, #680]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	4aa9      	ldr	r2, [pc, #676]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800374e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003752:	6093      	str	r3, [r2, #8]
 8003754:	4ba7      	ldr	r3, [pc, #668]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003756:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003760:	49a4      	ldr	r1, [pc, #656]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003762:	4313      	orrs	r3, r2
 8003764:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0310 	and.w	r3, r3, #16
 800376e:	2b00      	cmp	r3, #0
 8003770:	d010      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003772:	4ba0      	ldr	r3, [pc, #640]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003774:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003778:	4a9e      	ldr	r2, [pc, #632]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800377a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800377e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003782:	4b9c      	ldr	r3, [pc, #624]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003784:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378c:	4999      	ldr	r1, [pc, #612]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800378e:	4313      	orrs	r3, r2
 8003790:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d00a      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037a0:	4b94      	ldr	r3, [pc, #592]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037ae:	4991      	ldr	r1, [pc, #580]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00a      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037c2:	4b8c      	ldr	r3, [pc, #560]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037d0:	4988      	ldr	r1, [pc, #544]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00a      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037e4:	4b83      	ldr	r3, [pc, #524]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037f2:	4980      	ldr	r1, [pc, #512]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00a      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003806:	4b7b      	ldr	r3, [pc, #492]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800380c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003814:	4977      	ldr	r1, [pc, #476]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003816:	4313      	orrs	r3, r2
 8003818:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00a      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003828:	4b72      	ldr	r3, [pc, #456]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800382a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382e:	f023 0203 	bic.w	r2, r3, #3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003836:	496f      	ldr	r1, [pc, #444]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003838:	4313      	orrs	r3, r2
 800383a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00a      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800384a:	4b6a      	ldr	r3, [pc, #424]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800384c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003850:	f023 020c 	bic.w	r2, r3, #12
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003858:	4966      	ldr	r1, [pc, #408]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800385a:	4313      	orrs	r3, r2
 800385c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003868:	2b00      	cmp	r3, #0
 800386a:	d00a      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800386c:	4b61      	ldr	r3, [pc, #388]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800386e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003872:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800387a:	495e      	ldr	r1, [pc, #376]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800387c:	4313      	orrs	r3, r2
 800387e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00a      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800388e:	4b59      	ldr	r3, [pc, #356]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003894:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800389c:	4955      	ldr	r1, [pc, #340]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00a      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038b0:	4b50      	ldr	r3, [pc, #320]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038be:	494d      	ldr	r1, [pc, #308]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00a      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80038d2:	4b48      	ldr	r3, [pc, #288]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e0:	4944      	ldr	r1, [pc, #272]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00a      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80038f4:	4b3f      	ldr	r3, [pc, #252]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038fa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003902:	493c      	ldr	r1, [pc, #240]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003904:	4313      	orrs	r3, r2
 8003906:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00a      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003916:	4b37      	ldr	r3, [pc, #220]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800391c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003924:	4933      	ldr	r1, [pc, #204]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003926:	4313      	orrs	r3, r2
 8003928:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00a      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003938:	4b2e      	ldr	r3, [pc, #184]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800393a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800393e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003946:	492b      	ldr	r1, [pc, #172]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003948:	4313      	orrs	r3, r2
 800394a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d011      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800395a:	4b26      	ldr	r3, [pc, #152]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800395c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003960:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003968:	4922      	ldr	r1, [pc, #136]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800396a:	4313      	orrs	r3, r2
 800396c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003974:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003978:	d101      	bne.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800397a:	2301      	movs	r3, #1
 800397c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0308 	and.w	r3, r3, #8
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800398a:	2301      	movs	r3, #1
 800398c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00a      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800399a:	4b16      	ldr	r3, [pc, #88]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800399c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039a8:	4912      	ldr	r1, [pc, #72]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00b      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80039bc:	4b0d      	ldr	r3, [pc, #52]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039cc:	4909      	ldr	r1, [pc, #36]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d006      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f000 80d9 	beq.w	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80039e8:	4b02      	ldr	r3, [pc, #8]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a01      	ldr	r2, [pc, #4]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80039f2:	e001      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80039f4:	40023800 	.word	0x40023800
 80039f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039fa:	f7fe fb13 	bl	8002024 <HAL_GetTick>
 80039fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a00:	e008      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a02:	f7fe fb0f 	bl	8002024 <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	2b64      	cmp	r3, #100	; 0x64
 8003a0e:	d901      	bls.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e194      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a14:	4b6c      	ldr	r3, [pc, #432]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1f0      	bne.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0301 	and.w	r3, r3, #1
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d021      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d11d      	bne.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a34:	4b64      	ldr	r3, [pc, #400]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a3a:	0c1b      	lsrs	r3, r3, #16
 8003a3c:	f003 0303 	and.w	r3, r3, #3
 8003a40:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a42:	4b61      	ldr	r3, [pc, #388]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a48:	0e1b      	lsrs	r3, r3, #24
 8003a4a:	f003 030f 	and.w	r3, r3, #15
 8003a4e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	019a      	lsls	r2, r3, #6
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	041b      	lsls	r3, r3, #16
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	061b      	lsls	r3, r3, #24
 8003a60:	431a      	orrs	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	071b      	lsls	r3, r3, #28
 8003a68:	4957      	ldr	r1, [pc, #348]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d004      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a84:	d00a      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d02e      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a9a:	d129      	bne.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a9c:	4b4a      	ldr	r3, [pc, #296]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aa2:	0c1b      	lsrs	r3, r3, #16
 8003aa4:	f003 0303 	and.w	r3, r3, #3
 8003aa8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003aaa:	4b47      	ldr	r3, [pc, #284]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003aac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ab0:	0f1b      	lsrs	r3, r3, #28
 8003ab2:	f003 0307 	and.w	r3, r3, #7
 8003ab6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	019a      	lsls	r2, r3, #6
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	041b      	lsls	r3, r3, #16
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	061b      	lsls	r3, r3, #24
 8003aca:	431a      	orrs	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	071b      	lsls	r3, r3, #28
 8003ad0:	493d      	ldr	r1, [pc, #244]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003ad8:	4b3b      	ldr	r3, [pc, #236]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ada:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ade:	f023 021f 	bic.w	r2, r3, #31
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	4937      	ldr	r1, [pc, #220]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d01d      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003afc:	4b32      	ldr	r3, [pc, #200]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003afe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b02:	0e1b      	lsrs	r3, r3, #24
 8003b04:	f003 030f 	and.w	r3, r3, #15
 8003b08:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b0a:	4b2f      	ldr	r3, [pc, #188]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b10:	0f1b      	lsrs	r3, r3, #28
 8003b12:	f003 0307 	and.w	r3, r3, #7
 8003b16:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	019a      	lsls	r2, r3, #6
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	041b      	lsls	r3, r3, #16
 8003b24:	431a      	orrs	r2, r3
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	061b      	lsls	r3, r3, #24
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	071b      	lsls	r3, r3, #28
 8003b30:	4925      	ldr	r1, [pc, #148]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d011      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	019a      	lsls	r2, r3, #6
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	041b      	lsls	r3, r3, #16
 8003b50:	431a      	orrs	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	061b      	lsls	r3, r3, #24
 8003b58:	431a      	orrs	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	071b      	lsls	r3, r3, #28
 8003b60:	4919      	ldr	r1, [pc, #100]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b68:	4b17      	ldr	r3, [pc, #92]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a16      	ldr	r2, [pc, #88]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b74:	f7fe fa56 	bl	8002024 <HAL_GetTick>
 8003b78:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b7a:	e008      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b7c:	f7fe fa52 	bl	8002024 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b64      	cmp	r3, #100	; 0x64
 8003b88:	d901      	bls.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e0d7      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b8e:	4b0e      	ldr	r3, [pc, #56]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d0f0      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	f040 80cd 	bne.w	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003ba2:	4b09      	ldr	r3, [pc, #36]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a08      	ldr	r2, [pc, #32]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ba8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bae:	f7fe fa39 	bl	8002024 <HAL_GetTick>
 8003bb2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003bb4:	e00a      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003bb6:	f7fe fa35 	bl	8002024 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b64      	cmp	r3, #100	; 0x64
 8003bc2:	d903      	bls.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e0ba      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003bc8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003bcc:	4b5e      	ldr	r3, [pc, #376]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bd8:	d0ed      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d003      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d009      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d02e      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d12a      	bne.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c02:	4b51      	ldr	r3, [pc, #324]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c08:	0c1b      	lsrs	r3, r3, #16
 8003c0a:	f003 0303 	and.w	r3, r3, #3
 8003c0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c10:	4b4d      	ldr	r3, [pc, #308]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c16:	0f1b      	lsrs	r3, r3, #28
 8003c18:	f003 0307 	and.w	r3, r3, #7
 8003c1c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	019a      	lsls	r2, r3, #6
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	041b      	lsls	r3, r3, #16
 8003c28:	431a      	orrs	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	061b      	lsls	r3, r3, #24
 8003c30:	431a      	orrs	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	071b      	lsls	r3, r3, #28
 8003c36:	4944      	ldr	r1, [pc, #272]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c3e:	4b42      	ldr	r3, [pc, #264]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c44:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	021b      	lsls	r3, r3, #8
 8003c50:	493d      	ldr	r1, [pc, #244]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d022      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c6c:	d11d      	bne.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c6e:	4b36      	ldr	r3, [pc, #216]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c74:	0e1b      	lsrs	r3, r3, #24
 8003c76:	f003 030f 	and.w	r3, r3, #15
 8003c7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c7c:	4b32      	ldr	r3, [pc, #200]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c82:	0f1b      	lsrs	r3, r3, #28
 8003c84:	f003 0307 	and.w	r3, r3, #7
 8003c88:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	019a      	lsls	r2, r3, #6
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a1b      	ldr	r3, [r3, #32]
 8003c94:	041b      	lsls	r3, r3, #16
 8003c96:	431a      	orrs	r2, r3
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	061b      	lsls	r3, r3, #24
 8003c9c:	431a      	orrs	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	071b      	lsls	r3, r3, #28
 8003ca2:	4929      	ldr	r1, [pc, #164]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0308 	and.w	r3, r3, #8
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d028      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003cb6:	4b24      	ldr	r3, [pc, #144]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cbc:	0e1b      	lsrs	r3, r3, #24
 8003cbe:	f003 030f 	and.w	r3, r3, #15
 8003cc2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003cc4:	4b20      	ldr	r3, [pc, #128]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cca:	0c1b      	lsrs	r3, r3, #16
 8003ccc:	f003 0303 	and.w	r3, r3, #3
 8003cd0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	019a      	lsls	r2, r3, #6
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	041b      	lsls	r3, r3, #16
 8003cdc:	431a      	orrs	r2, r3
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	061b      	lsls	r3, r3, #24
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	69db      	ldr	r3, [r3, #28]
 8003ce8:	071b      	lsls	r3, r3, #28
 8003cea:	4917      	ldr	r1, [pc, #92]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003cf2:	4b15      	ldr	r3, [pc, #84]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cf8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d00:	4911      	ldr	r1, [pc, #68]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003d08:	4b0f      	ldr	r3, [pc, #60]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a0e      	ldr	r2, [pc, #56]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d14:	f7fe f986 	bl	8002024 <HAL_GetTick>
 8003d18:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d1c:	f7fe f982 	bl	8002024 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b64      	cmp	r3, #100	; 0x64
 8003d28:	d901      	bls.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e007      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d2e:	4b06      	ldr	r3, [pc, #24]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d3a:	d1ef      	bne.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3720      	adds	r7, #32
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	40023800 	.word	0x40023800

08003d4c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e01c      	b.n	8003d98 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	795b      	ldrb	r3, [r3, #5]
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d105      	bne.n	8003d74 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7fe f84a 	bl	8001e08 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2202      	movs	r2, #2
 8003d78:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f042 0204 	orr.w	r2, r2, #4
 8003d88:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3708      	adds	r7, #8
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e049      	b.n	8003e46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d106      	bne.n	8003dcc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f7fe f83e 	bl	8001e48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2202      	movs	r2, #2
 8003dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	3304      	adds	r3, #4
 8003ddc:	4619      	mov	r1, r3
 8003dde:	4610      	mov	r0, r2
 8003de0:	f000 fac0 	bl	8004364 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
	...

08003e50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b085      	sub	sp, #20
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d001      	beq.n	8003e68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e054      	b.n	8003f12 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68da      	ldr	r2, [r3, #12]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f042 0201 	orr.w	r2, r2, #1
 8003e7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a26      	ldr	r2, [pc, #152]	; (8003f20 <HAL_TIM_Base_Start_IT+0xd0>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d022      	beq.n	8003ed0 <HAL_TIM_Base_Start_IT+0x80>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e92:	d01d      	beq.n	8003ed0 <HAL_TIM_Base_Start_IT+0x80>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a22      	ldr	r2, [pc, #136]	; (8003f24 <HAL_TIM_Base_Start_IT+0xd4>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d018      	beq.n	8003ed0 <HAL_TIM_Base_Start_IT+0x80>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a21      	ldr	r2, [pc, #132]	; (8003f28 <HAL_TIM_Base_Start_IT+0xd8>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d013      	beq.n	8003ed0 <HAL_TIM_Base_Start_IT+0x80>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a1f      	ldr	r2, [pc, #124]	; (8003f2c <HAL_TIM_Base_Start_IT+0xdc>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d00e      	beq.n	8003ed0 <HAL_TIM_Base_Start_IT+0x80>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a1e      	ldr	r2, [pc, #120]	; (8003f30 <HAL_TIM_Base_Start_IT+0xe0>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d009      	beq.n	8003ed0 <HAL_TIM_Base_Start_IT+0x80>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a1c      	ldr	r2, [pc, #112]	; (8003f34 <HAL_TIM_Base_Start_IT+0xe4>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d004      	beq.n	8003ed0 <HAL_TIM_Base_Start_IT+0x80>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a1b      	ldr	r2, [pc, #108]	; (8003f38 <HAL_TIM_Base_Start_IT+0xe8>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d115      	bne.n	8003efc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689a      	ldr	r2, [r3, #8]
 8003ed6:	4b19      	ldr	r3, [pc, #100]	; (8003f3c <HAL_TIM_Base_Start_IT+0xec>)
 8003ed8:	4013      	ands	r3, r2
 8003eda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2b06      	cmp	r3, #6
 8003ee0:	d015      	beq.n	8003f0e <HAL_TIM_Base_Start_IT+0xbe>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ee8:	d011      	beq.n	8003f0e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f042 0201 	orr.w	r2, r2, #1
 8003ef8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003efa:	e008      	b.n	8003f0e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 0201 	orr.w	r2, r2, #1
 8003f0a:	601a      	str	r2, [r3, #0]
 8003f0c:	e000      	b.n	8003f10 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f0e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3714      	adds	r7, #20
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	40010000 	.word	0x40010000
 8003f24:	40000400 	.word	0x40000400
 8003f28:	40000800 	.word	0x40000800
 8003f2c:	40000c00 	.word	0x40000c00
 8003f30:	40010400 	.word	0x40010400
 8003f34:	40014000 	.word	0x40014000
 8003f38:	40001800 	.word	0x40001800
 8003f3c:	00010007 	.word	0x00010007

08003f40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d122      	bne.n	8003f9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d11b      	bne.n	8003f9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f06f 0202 	mvn.w	r2, #2
 8003f6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2201      	movs	r2, #1
 8003f72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	f003 0303 	and.w	r3, r3, #3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d003      	beq.n	8003f8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f9d0 	bl	8004328 <HAL_TIM_IC_CaptureCallback>
 8003f88:	e005      	b.n	8003f96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 f9c2 	bl	8004314 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 f9d3 	bl	800433c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	f003 0304 	and.w	r3, r3, #4
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d122      	bne.n	8003ff0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	f003 0304 	and.w	r3, r3, #4
 8003fb4:	2b04      	cmp	r3, #4
 8003fb6:	d11b      	bne.n	8003ff0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f06f 0204 	mvn.w	r2, #4
 8003fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2202      	movs	r2, #2
 8003fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d003      	beq.n	8003fde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 f9a6 	bl	8004328 <HAL_TIM_IC_CaptureCallback>
 8003fdc:	e005      	b.n	8003fea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 f998 	bl	8004314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 f9a9 	bl	800433c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	f003 0308 	and.w	r3, r3, #8
 8003ffa:	2b08      	cmp	r3, #8
 8003ffc:	d122      	bne.n	8004044 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	f003 0308 	and.w	r3, r3, #8
 8004008:	2b08      	cmp	r3, #8
 800400a:	d11b      	bne.n	8004044 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f06f 0208 	mvn.w	r2, #8
 8004014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2204      	movs	r2, #4
 800401a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	69db      	ldr	r3, [r3, #28]
 8004022:	f003 0303 	and.w	r3, r3, #3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d003      	beq.n	8004032 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 f97c 	bl	8004328 <HAL_TIM_IC_CaptureCallback>
 8004030:	e005      	b.n	800403e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 f96e 	bl	8004314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 f97f 	bl	800433c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	f003 0310 	and.w	r3, r3, #16
 800404e:	2b10      	cmp	r3, #16
 8004050:	d122      	bne.n	8004098 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	f003 0310 	and.w	r3, r3, #16
 800405c:	2b10      	cmp	r3, #16
 800405e:	d11b      	bne.n	8004098 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f06f 0210 	mvn.w	r2, #16
 8004068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2208      	movs	r2, #8
 800406e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	69db      	ldr	r3, [r3, #28]
 8004076:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800407a:	2b00      	cmp	r3, #0
 800407c:	d003      	beq.n	8004086 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 f952 	bl	8004328 <HAL_TIM_IC_CaptureCallback>
 8004084:	e005      	b.n	8004092 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 f944 	bl	8004314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 f955 	bl	800433c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d10e      	bne.n	80040c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d107      	bne.n	80040c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f06f 0201 	mvn.w	r2, #1
 80040bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7fd f90e 	bl	80012e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ce:	2b80      	cmp	r3, #128	; 0x80
 80040d0:	d10e      	bne.n	80040f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040dc:	2b80      	cmp	r3, #128	; 0x80
 80040de:	d107      	bne.n	80040f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 fb0c 	bl	8004708 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040fe:	d10e      	bne.n	800411e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800410a:	2b80      	cmp	r3, #128	; 0x80
 800410c:	d107      	bne.n	800411e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004116:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f000 faff 	bl	800471c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004128:	2b40      	cmp	r3, #64	; 0x40
 800412a:	d10e      	bne.n	800414a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004136:	2b40      	cmp	r3, #64	; 0x40
 8004138:	d107      	bne.n	800414a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004142:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 f903 	bl	8004350 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	f003 0320 	and.w	r3, r3, #32
 8004154:	2b20      	cmp	r3, #32
 8004156:	d10e      	bne.n	8004176 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	f003 0320 	and.w	r3, r3, #32
 8004162:	2b20      	cmp	r3, #32
 8004164:	d107      	bne.n	8004176 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f06f 0220 	mvn.w	r2, #32
 800416e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 fabf 	bl	80046f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004176:	bf00      	nop
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
	...

08004180 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800418a:	2300      	movs	r3, #0
 800418c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004194:	2b01      	cmp	r3, #1
 8004196:	d101      	bne.n	800419c <HAL_TIM_ConfigClockSource+0x1c>
 8004198:	2302      	movs	r3, #2
 800419a:	e0b4      	b.n	8004306 <HAL_TIM_ConfigClockSource+0x186>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2202      	movs	r2, #2
 80041a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	4b56      	ldr	r3, [pc, #344]	; (8004310 <HAL_TIM_ConfigClockSource+0x190>)
 80041b8:	4013      	ands	r3, r2
 80041ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041d4:	d03e      	beq.n	8004254 <HAL_TIM_ConfigClockSource+0xd4>
 80041d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041da:	f200 8087 	bhi.w	80042ec <HAL_TIM_ConfigClockSource+0x16c>
 80041de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041e2:	f000 8086 	beq.w	80042f2 <HAL_TIM_ConfigClockSource+0x172>
 80041e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ea:	d87f      	bhi.n	80042ec <HAL_TIM_ConfigClockSource+0x16c>
 80041ec:	2b70      	cmp	r3, #112	; 0x70
 80041ee:	d01a      	beq.n	8004226 <HAL_TIM_ConfigClockSource+0xa6>
 80041f0:	2b70      	cmp	r3, #112	; 0x70
 80041f2:	d87b      	bhi.n	80042ec <HAL_TIM_ConfigClockSource+0x16c>
 80041f4:	2b60      	cmp	r3, #96	; 0x60
 80041f6:	d050      	beq.n	800429a <HAL_TIM_ConfigClockSource+0x11a>
 80041f8:	2b60      	cmp	r3, #96	; 0x60
 80041fa:	d877      	bhi.n	80042ec <HAL_TIM_ConfigClockSource+0x16c>
 80041fc:	2b50      	cmp	r3, #80	; 0x50
 80041fe:	d03c      	beq.n	800427a <HAL_TIM_ConfigClockSource+0xfa>
 8004200:	2b50      	cmp	r3, #80	; 0x50
 8004202:	d873      	bhi.n	80042ec <HAL_TIM_ConfigClockSource+0x16c>
 8004204:	2b40      	cmp	r3, #64	; 0x40
 8004206:	d058      	beq.n	80042ba <HAL_TIM_ConfigClockSource+0x13a>
 8004208:	2b40      	cmp	r3, #64	; 0x40
 800420a:	d86f      	bhi.n	80042ec <HAL_TIM_ConfigClockSource+0x16c>
 800420c:	2b30      	cmp	r3, #48	; 0x30
 800420e:	d064      	beq.n	80042da <HAL_TIM_ConfigClockSource+0x15a>
 8004210:	2b30      	cmp	r3, #48	; 0x30
 8004212:	d86b      	bhi.n	80042ec <HAL_TIM_ConfigClockSource+0x16c>
 8004214:	2b20      	cmp	r3, #32
 8004216:	d060      	beq.n	80042da <HAL_TIM_ConfigClockSource+0x15a>
 8004218:	2b20      	cmp	r3, #32
 800421a:	d867      	bhi.n	80042ec <HAL_TIM_ConfigClockSource+0x16c>
 800421c:	2b00      	cmp	r3, #0
 800421e:	d05c      	beq.n	80042da <HAL_TIM_ConfigClockSource+0x15a>
 8004220:	2b10      	cmp	r3, #16
 8004222:	d05a      	beq.n	80042da <HAL_TIM_ConfigClockSource+0x15a>
 8004224:	e062      	b.n	80042ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004236:	f000 f9af 	bl	8004598 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004248:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	609a      	str	r2, [r3, #8]
      break;
 8004252:	e04f      	b.n	80042f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004264:	f000 f998 	bl	8004598 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689a      	ldr	r2, [r3, #8]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004276:	609a      	str	r2, [r3, #8]
      break;
 8004278:	e03c      	b.n	80042f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004286:	461a      	mov	r2, r3
 8004288:	f000 f90c 	bl	80044a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2150      	movs	r1, #80	; 0x50
 8004292:	4618      	mov	r0, r3
 8004294:	f000 f965 	bl	8004562 <TIM_ITRx_SetConfig>
      break;
 8004298:	e02c      	b.n	80042f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042a6:	461a      	mov	r2, r3
 80042a8:	f000 f92b 	bl	8004502 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2160      	movs	r1, #96	; 0x60
 80042b2:	4618      	mov	r0, r3
 80042b4:	f000 f955 	bl	8004562 <TIM_ITRx_SetConfig>
      break;
 80042b8:	e01c      	b.n	80042f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042c6:	461a      	mov	r2, r3
 80042c8:	f000 f8ec 	bl	80044a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2140      	movs	r1, #64	; 0x40
 80042d2:	4618      	mov	r0, r3
 80042d4:	f000 f945 	bl	8004562 <TIM_ITRx_SetConfig>
      break;
 80042d8:	e00c      	b.n	80042f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4619      	mov	r1, r3
 80042e4:	4610      	mov	r0, r2
 80042e6:	f000 f93c 	bl	8004562 <TIM_ITRx_SetConfig>
      break;
 80042ea:	e003      	b.n	80042f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	73fb      	strb	r3, [r7, #15]
      break;
 80042f0:	e000      	b.n	80042f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80042f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004304:	7bfb      	ldrb	r3, [r7, #15]
}
 8004306:	4618      	mov	r0, r3
 8004308:	3710      	adds	r7, #16
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	fffeff88 	.word	0xfffeff88

08004314 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800431c:	bf00      	nop
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a40      	ldr	r2, [pc, #256]	; (8004478 <TIM_Base_SetConfig+0x114>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d013      	beq.n	80043a4 <TIM_Base_SetConfig+0x40>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004382:	d00f      	beq.n	80043a4 <TIM_Base_SetConfig+0x40>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a3d      	ldr	r2, [pc, #244]	; (800447c <TIM_Base_SetConfig+0x118>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d00b      	beq.n	80043a4 <TIM_Base_SetConfig+0x40>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a3c      	ldr	r2, [pc, #240]	; (8004480 <TIM_Base_SetConfig+0x11c>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d007      	beq.n	80043a4 <TIM_Base_SetConfig+0x40>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a3b      	ldr	r2, [pc, #236]	; (8004484 <TIM_Base_SetConfig+0x120>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d003      	beq.n	80043a4 <TIM_Base_SetConfig+0x40>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a3a      	ldr	r2, [pc, #232]	; (8004488 <TIM_Base_SetConfig+0x124>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d108      	bne.n	80043b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a2f      	ldr	r2, [pc, #188]	; (8004478 <TIM_Base_SetConfig+0x114>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d02b      	beq.n	8004416 <TIM_Base_SetConfig+0xb2>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043c4:	d027      	beq.n	8004416 <TIM_Base_SetConfig+0xb2>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a2c      	ldr	r2, [pc, #176]	; (800447c <TIM_Base_SetConfig+0x118>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d023      	beq.n	8004416 <TIM_Base_SetConfig+0xb2>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a2b      	ldr	r2, [pc, #172]	; (8004480 <TIM_Base_SetConfig+0x11c>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d01f      	beq.n	8004416 <TIM_Base_SetConfig+0xb2>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a2a      	ldr	r2, [pc, #168]	; (8004484 <TIM_Base_SetConfig+0x120>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d01b      	beq.n	8004416 <TIM_Base_SetConfig+0xb2>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a29      	ldr	r2, [pc, #164]	; (8004488 <TIM_Base_SetConfig+0x124>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d017      	beq.n	8004416 <TIM_Base_SetConfig+0xb2>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a28      	ldr	r2, [pc, #160]	; (800448c <TIM_Base_SetConfig+0x128>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d013      	beq.n	8004416 <TIM_Base_SetConfig+0xb2>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a27      	ldr	r2, [pc, #156]	; (8004490 <TIM_Base_SetConfig+0x12c>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d00f      	beq.n	8004416 <TIM_Base_SetConfig+0xb2>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a26      	ldr	r2, [pc, #152]	; (8004494 <TIM_Base_SetConfig+0x130>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d00b      	beq.n	8004416 <TIM_Base_SetConfig+0xb2>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a25      	ldr	r2, [pc, #148]	; (8004498 <TIM_Base_SetConfig+0x134>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d007      	beq.n	8004416 <TIM_Base_SetConfig+0xb2>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a24      	ldr	r2, [pc, #144]	; (800449c <TIM_Base_SetConfig+0x138>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d003      	beq.n	8004416 <TIM_Base_SetConfig+0xb2>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a23      	ldr	r2, [pc, #140]	; (80044a0 <TIM_Base_SetConfig+0x13c>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d108      	bne.n	8004428 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800441c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	4313      	orrs	r3, r2
 8004426:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	4313      	orrs	r3, r2
 8004434:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a0a      	ldr	r2, [pc, #40]	; (8004478 <TIM_Base_SetConfig+0x114>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d003      	beq.n	800445c <TIM_Base_SetConfig+0xf8>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a0c      	ldr	r2, [pc, #48]	; (8004488 <TIM_Base_SetConfig+0x124>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d103      	bne.n	8004464 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	691a      	ldr	r2, [r3, #16]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	615a      	str	r2, [r3, #20]
}
 800446a:	bf00      	nop
 800446c:	3714      	adds	r7, #20
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	40010000 	.word	0x40010000
 800447c:	40000400 	.word	0x40000400
 8004480:	40000800 	.word	0x40000800
 8004484:	40000c00 	.word	0x40000c00
 8004488:	40010400 	.word	0x40010400
 800448c:	40014000 	.word	0x40014000
 8004490:	40014400 	.word	0x40014400
 8004494:	40014800 	.word	0x40014800
 8004498:	40001800 	.word	0x40001800
 800449c:	40001c00 	.word	0x40001c00
 80044a0:	40002000 	.word	0x40002000

080044a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b087      	sub	sp, #28
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6a1b      	ldr	r3, [r3, #32]
 80044b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	f023 0201 	bic.w	r2, r3, #1
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	011b      	lsls	r3, r3, #4
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	f023 030a 	bic.w	r3, r3, #10
 80044e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	621a      	str	r2, [r3, #32]
}
 80044f6:	bf00      	nop
 80044f8:	371c      	adds	r7, #28
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr

08004502 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004502:	b480      	push	{r7}
 8004504:	b087      	sub	sp, #28
 8004506:	af00      	add	r7, sp, #0
 8004508:	60f8      	str	r0, [r7, #12]
 800450a:	60b9      	str	r1, [r7, #8]
 800450c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	f023 0210 	bic.w	r2, r3, #16
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800452c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	031b      	lsls	r3, r3, #12
 8004532:	697a      	ldr	r2, [r7, #20]
 8004534:	4313      	orrs	r3, r2
 8004536:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800453e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	011b      	lsls	r3, r3, #4
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	4313      	orrs	r3, r2
 8004548:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	621a      	str	r2, [r3, #32]
}
 8004556:	bf00      	nop
 8004558:	371c      	adds	r7, #28
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr

08004562 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004562:	b480      	push	{r7}
 8004564:	b085      	sub	sp, #20
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
 800456a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004578:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800457a:	683a      	ldr	r2, [r7, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	4313      	orrs	r3, r2
 8004580:	f043 0307 	orr.w	r3, r3, #7
 8004584:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	609a      	str	r2, [r3, #8]
}
 800458c:	bf00      	nop
 800458e:	3714      	adds	r7, #20
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004598:	b480      	push	{r7}
 800459a:	b087      	sub	sp, #28
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
 80045a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	021a      	lsls	r2, r3, #8
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	431a      	orrs	r2, r3
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	4313      	orrs	r3, r2
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	609a      	str	r2, [r3, #8]
}
 80045cc:	bf00      	nop
 80045ce:	371c      	adds	r7, #28
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045d8:	b480      	push	{r7}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d101      	bne.n	80045f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045ec:	2302      	movs	r3, #2
 80045ee:	e06d      	b.n	80046cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2202      	movs	r2, #2
 80045fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a30      	ldr	r2, [pc, #192]	; (80046d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d004      	beq.n	8004624 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a2f      	ldr	r2, [pc, #188]	; (80046dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d108      	bne.n	8004636 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800462a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	4313      	orrs	r3, r2
 8004634:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800463c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	4313      	orrs	r3, r2
 8004646:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a20      	ldr	r2, [pc, #128]	; (80046d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d022      	beq.n	80046a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004662:	d01d      	beq.n	80046a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a1d      	ldr	r2, [pc, #116]	; (80046e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d018      	beq.n	80046a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a1c      	ldr	r2, [pc, #112]	; (80046e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d013      	beq.n	80046a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a1a      	ldr	r2, [pc, #104]	; (80046e8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d00e      	beq.n	80046a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a15      	ldr	r2, [pc, #84]	; (80046dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d009      	beq.n	80046a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a16      	ldr	r2, [pc, #88]	; (80046ec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d004      	beq.n	80046a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a15      	ldr	r2, [pc, #84]	; (80046f0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d10c      	bne.n	80046ba <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	68ba      	ldr	r2, [r7, #8]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68ba      	ldr	r2, [r7, #8]
 80046b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3714      	adds	r7, #20
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr
 80046d8:	40010000 	.word	0x40010000
 80046dc:	40010400 	.word	0x40010400
 80046e0:	40000400 	.word	0x40000400
 80046e4:	40000800 	.word	0x40000800
 80046e8:	40000c00 	.word	0x40000c00
 80046ec:	40014000 	.word	0x40014000
 80046f0:	40001800 	.word	0x40001800

080046f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <memset>:
 8004730:	4402      	add	r2, r0
 8004732:	4603      	mov	r3, r0
 8004734:	4293      	cmp	r3, r2
 8004736:	d100      	bne.n	800473a <memset+0xa>
 8004738:	4770      	bx	lr
 800473a:	f803 1b01 	strb.w	r1, [r3], #1
 800473e:	e7f9      	b.n	8004734 <memset+0x4>

08004740 <__libc_init_array>:
 8004740:	b570      	push	{r4, r5, r6, lr}
 8004742:	4d0d      	ldr	r5, [pc, #52]	; (8004778 <__libc_init_array+0x38>)
 8004744:	4c0d      	ldr	r4, [pc, #52]	; (800477c <__libc_init_array+0x3c>)
 8004746:	1b64      	subs	r4, r4, r5
 8004748:	10a4      	asrs	r4, r4, #2
 800474a:	2600      	movs	r6, #0
 800474c:	42a6      	cmp	r6, r4
 800474e:	d109      	bne.n	8004764 <__libc_init_array+0x24>
 8004750:	4d0b      	ldr	r5, [pc, #44]	; (8004780 <__libc_init_array+0x40>)
 8004752:	4c0c      	ldr	r4, [pc, #48]	; (8004784 <__libc_init_array+0x44>)
 8004754:	f000 f826 	bl	80047a4 <_init>
 8004758:	1b64      	subs	r4, r4, r5
 800475a:	10a4      	asrs	r4, r4, #2
 800475c:	2600      	movs	r6, #0
 800475e:	42a6      	cmp	r6, r4
 8004760:	d105      	bne.n	800476e <__libc_init_array+0x2e>
 8004762:	bd70      	pop	{r4, r5, r6, pc}
 8004764:	f855 3b04 	ldr.w	r3, [r5], #4
 8004768:	4798      	blx	r3
 800476a:	3601      	adds	r6, #1
 800476c:	e7ee      	b.n	800474c <__libc_init_array+0xc>
 800476e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004772:	4798      	blx	r3
 8004774:	3601      	adds	r6, #1
 8004776:	e7f2      	b.n	800475e <__libc_init_array+0x1e>
 8004778:	0800fb84 	.word	0x0800fb84
 800477c:	0800fb84 	.word	0x0800fb84
 8004780:	0800fb84 	.word	0x0800fb84
 8004784:	0800fb88 	.word	0x0800fb88

08004788 <memcpy>:
 8004788:	440a      	add	r2, r1
 800478a:	4291      	cmp	r1, r2
 800478c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004790:	d100      	bne.n	8004794 <memcpy+0xc>
 8004792:	4770      	bx	lr
 8004794:	b510      	push	{r4, lr}
 8004796:	f811 4b01 	ldrb.w	r4, [r1], #1
 800479a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800479e:	4291      	cmp	r1, r2
 80047a0:	d1f9      	bne.n	8004796 <memcpy+0xe>
 80047a2:	bd10      	pop	{r4, pc}

080047a4 <_init>:
 80047a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047a6:	bf00      	nop
 80047a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047aa:	bc08      	pop	{r3}
 80047ac:	469e      	mov	lr, r3
 80047ae:	4770      	bx	lr

080047b0 <_fini>:
 80047b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047b2:	bf00      	nop
 80047b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047b6:	bc08      	pop	{r3}
 80047b8:	469e      	mov	lr, r3
 80047ba:	4770      	bx	lr
